* Multiple Windows

#+begin_src emacs-lisp
;;* 20 Multiple (info "(emacs)Windows")

(leuven--chapter leuven-load-chapter-20-windows "20 Multiple Windows"
#+end_src

** Concepts of Emacs Windows

#+begin_src emacs-lisp
;;** 20.1 (info "(emacs)Basic Window")

  (leuven--section "20.1 (emacs)Basic Window")
#+end_src

** Using Other Windows

#+begin_src emacs-lisp
;;** 20.3 (info "(emacs)Other Window")

  (leuven--section "20.3 (emacs)Other Window")

  (global-set-key (kbd "<f6>") #'other-window)
#+end_src

If there are two windows displayed, act like =C-x o=.
If there is only one window displayed, swap it with previous buffer.

#+begin_src emacs-lisp
  (defun leuven-switch-to-other-window-or-buffer ()
    "If there is only one window displayed, swap it with previous buffer.
If there are two or more windows displayed, act like `other-window':
cycle through all windows on current frame."
    (interactive)
    (if (one-window-p t)
        (switch-to-buffer (other-buffer (current-buffer) 1))
      (other-window -1)))

  (global-set-key (kbd "<f6>") #'leuven-switch-to-other-window-or-buffer)
#+end_src

#+begin_src emacs-lisp
  ;; Reverse operation of `other-window' (`C-x o').
  (global-set-key (kbd "<S-f6>") #'previous-multiframe-window)
#+end_src

** Deleting and Rearranging Windows

If there is only one window displayed, act like ~C-x 2~ or ~C-x 3~.  If there are
two (or more) windows displayed, act like ~C-x 1~.

#+begin_src emacs-lisp
;;** 20.5 (info "(emacs)Change Window")

  (leuven--section "20.5 (emacs)Change Window")

  (defun leuven-delete-or-split-window ()
    "Cycle between 1 window and 2 windows.

  When splitting the window, the new window is selected, as it
  makes more sense to do something there first.

  The window's contents is unchanged by default.

  Do you want to see another part of the same file?  You've
  nothing to do.

  Do you want to see the last file you were visiting?  Simply
  bury the current buffer (M-<F12>).

  Do you want to go back to the first window?  Switch to
  it (<F6>)."
    (interactive)
    (cond ((one-window-p t)
           (select-window
            (if (> (frame-width) split-width-threshold)
                (split-window-horizontally)
              (split-window-vertically))))
          (t
           (delete-other-windows))))

  ;; Delete all windows in the selected frame except the selected window.
  (global-set-key (kbd "<f5>") #'leuven-delete-or-split-window)
#+end_src

The following code flips a two-window frame, so that left is right, or up is
down.

#+begin_src emacs-lisp
  ;; Swap 2 windows.
  (defun leuven-swap-windows ()
    "If you have 2 windows, swap them."
    (interactive)
    (cond ((not (= (count-windows) 2))
           (message "[You need exactly 2 windows to swap them.]"))
          (t
           (let* ((wind-1 (first (window-list)))
                  (wind-2 (second (window-list)))
                  (buf-1 (window-buffer wind-1))
                  (buf-2 (window-buffer wind-2))
                  (start-1 (window-start wind-1))
                  (start-2 (window-start wind-2)))
             (set-window-buffer wind-1 buf-2)
             (set-window-buffer wind-2 buf-1)
             (set-window-start wind-1 start-2)
             (set-window-start wind-2 start-1)))))

  (global-set-key (kbd "C-c ~") #'leuven-swap-windows)
#+end_src

The following code toggles between horizontal and vertical layout of two
windows.  Useful when Emacs opens the window below instead at the side.

#+begin_src emacs-lisp
  (defun leuven-toggle-window-split ()
    "Toggle between vertical and horizontal split.
  Vertical split shows more of each line, horizontal split shows more lines.
  This code only works for frames with exactly two windows."
    (interactive)
    (cond ((not (= (count-windows) 2))
           (message "[You need exactly 2 windows to toggle the window split.]"))
          (t
           (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                  (this-win-edges (window-edges (selected-window)))
                  (next-win-edges (window-edges (next-window)))
                  (this-win-2nd (not (and (<= (car this-win-edges)
                                              (car next-win-edges))
                                          (<= (cadr this-win-edges)
                                              (cadr next-win-edges)))))
                  (splitter
                   (if (= (car this-win-edges)
                          (car (window-edges (next-window))))
                       'split-window-horizontally
                     'split-window-vertically)))
             (delete-other-windows)
             (let ((first-win (selected-window)))
               (funcall splitter)
               (if this-win-2nd (other-window 1))
               (set-window-buffer (selected-window) this-win-buffer)
               (set-window-buffer (next-window) next-win-buffer)
               (select-window first-win)
               (if this-win-2nd (other-window 1)))))))

  (global-set-key (kbd "C-c |") #'leuven-toggle-window-split)
#+end_src

~delete-window~: if only one window in frame, ~delete-frame~:

#+begin_src emacs-lisp
  (defadvice delete-window (around delete-window (&optional window) activate)
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (if (one-window-p t)
      (delete-frame)
        ad-do-it (selected-window))))
#+end_src

** Dedicated windows

How to avoid displaying another buffer in a specific window, making the current
window always display this buffer ("sticky window").

#+begin_src emacs-lisp
  (defun toggle-current-window-dedication ()
    "Toggle whether the current active window is dedicated or not."
    (interactive)
    (let* ((window (selected-window))
           (dedicated (window-dedicated-p window)))
      (set-window-dedicated-p window (not dedicated))
      (message "[Window %sdedicated to %s]"
               (if dedicated "no longer " "")
               (buffer-name))))

  ;; Press [pause] key in each window you want to "freeze".
  (global-set-key (kbd "<pause>") #'toggle-current-window-dedication)
#+end_src

** Displaying a Buffer in a Window

Splits screen vertically if the width of the window is large enough.

See
http://stackoverflow.com/questions/1381794/too-many-split-screens-opening-in-emacs
for alternative code...

See as well ~split-window-preferred-function~.

#+begin_src emacs-lisp
;;** 20.6 (info "(emacs)Displaying Buffers")

  (leuven--section "20.6 (emacs)Pop Up Window")

  ;; Don't allow splitting windows vertically.
  (setq split-height-threshold nil)

  ;; ;; Minimum width for splitting windows horizontally.
  ;; (setq split-width-threshold (* 2 80))      ; See `split-window-sensibly'.
#+end_src

** Window Handling Convenience Features and Customization

Use ~M-x scroll-all-mode~ to scroll all visible windows together in parallel.

#+begin_src emacs-lisp
)                                       ; Chapter 20 ends here.
#+end_src

