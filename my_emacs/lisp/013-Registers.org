* Registers (Navigation)

#+begin_src emacs-lisp
;;* 13 (info "(emacs)Registers")

(leuven--chapter leuven-load-chapter-13-registers "13 Registers"
#+end_src

** Saving Positions in Registers

#+begin_src emacs-lisp
;;** 13.1 (info "(emacs)Position Registers")

  (leuven--section "13.1 (emacs)Position Registers")
#+end_src

*Registers:*

- ~C-x r SPC~ ::
     ~point-to-register~.  Store point in a register.  Type any character to
     specify a register when prompted.

- ~C-x r j~ ::
     ~jump-to-register~.  Jump to a point stored in a register.

Setup registers for files I commonly edit.

#+begin_src emacs-lisp :tangle no
  (set-register ?a '(file . "/sudo::/etc/apt/sources.list"))
  (set-register ?b '(file . "~/.bashrc"))
  (set-register ?e `(file . ,(concat leuven--directory "emacs-leuven.txt")))
  (when (file-exists-p "~/4-Admin/0-refile.org")
    (set-register ?r '(file . "~/4-Admin/0-refile.org"))) ; Open my CollectBox.
  (set-register ?z '(file . "~/.zshrc"))
#+end_src

** Navigating with Bookmarks

*** Bookmark

If you need to *move to somewhere in your document* and want a *quick way to
return*, you can create a *bookmark WITH MNEMONIC* on the current line.

#+begin_note
Emacs bookmarks positions, not (just) lines!
#+end_note

*Bookmarks:*

- C-x r m ::
     ~C-x r m RET~ or ~C-x r m BOOKMARK RET~ (~M-x bookmark-set~).  Save a named
     bookmark.

- C-x r b ::
     ~bookmark-jump~.  Jump to a named bookmark.

- C-x r l ::
     List all bookmarks.

#+begin_note
Bookmarks are *persistent* across sessions and they have *names*; not /markers/.
Bookmarked positions can also be *relocated* (found) if they move slightly because
of text changes.
#+end_note

#+begin_src emacs-lisp
  ;;** 13.7 (info "(emacs)Bookmarks")

    (leuven--section "13.7 (emacs)Bookmarks")

    (use-package bookmark
      :ensure nil
      :config
      ;; Where to save the bookmarks.
      (setq bookmark-default-file (concat user-emacs-directory "bookmarks.bmk"))
					  ;! A `.txt' extension would load Org at
					  ;! the time `bookmark' is required!

      ;; Each command that sets a bookmark will also save your bookmarks.
      (setq bookmark-save-flag 1)
    )
#+end_src

*** Bookmark+

With *Bookmark+* (which offers quite a bit more than =bm.el=):

- Bookmarks are *visible* in the buffer.

- Bookmarks can be as simple as marks -- *no naming needed*.

- You can *cycle* among them.

- You can bookmark arbitrary sets of files, from any locations.

- You can bookmark Dired buffers (which, again, can actually list arbitrary
  files, not even necessarily in the same directory).  Markings, subdir
  inclusions, and omissions are all recorded, and restored when you access the
  bookmark.

- You can tag bookmarks or files, using arbitrary strings as tags.  You can do
  this programmatically and interactively, by regexp, name, or Dired markings.
  Tags give you a great way to define sets of bookmarks or files -- sets that
  can overlap, etc.  They serve to categorize, but they can do more than that.
  You can use tags to, in effect, merge projects, split projects, define
  subprojects, and so on.

Key shortcuts:

| Command                       | Sublime Text | IntelliJ | Atom   | Webstorm |
|-------------------------------+--------------+----------+--------+----------|
| View All bookmarks            | M-F2         | S-F11    | C-F2   | S-F11    |
| Toggle bookmark               | C-F2         | F11      | C-M-F2 | F11      |
| Toggle bookmark with mnemonic |              | C-F11    |        | C-S-F11  |
| Jump to Next bookmark         | F2           | -        | F2     |          |
| Jump to Previous bookmark     | S-F2         | -        | S-F2   |          |
| Clear All Bookmarks           | C-S-F2       |          |        |          |

- ~C-x p RET~ (~C-<F2>~ in Emacs-Leuven, Sublime Text and TextMate) ::
     *Toggle* (*set* or delete) an *ANONYMOUS bookmark* at point.

- M-x bmkp-set-autonamed-regexp-buffer ::
     Set *ANONYMOUS bookmarks* at matches for REGEXP in the buffer.

- ~C-x p C-down~ (~S-<F2>~ in Emacs-Leuven, ~F2~ in Sublime Text and TextMate) ::
     Navigate to the *next bookmark* within the current buffer.

- ~C-x p C-up~ (~S-<F2>~ in Sublime Text and TextMate) ::
     Navigate to the *previous bookmark* within the current buffer.

- ~C-x j h~ ::
     Jump to a bookmark.

- C-x p , ::
     *Show all bookmarks* for the current file/buffer.

- C-x p DEL ::
     *Delete bookmark* (*ANONYMOUS* or *WITH MNEMONICS*) *at point*.

- ~C-S-<F2>~ (in Emacs-Leuven) ::
     *Delete all ANONYMOUS bookmarks* for the current file/buffer.

Buffer-local nature of the bookmarks.

Annotating bookmarks.

#+begin_src emacs-lisp
   ;; Extensions to standard library `bookmark.el'.
   (use-package bookmark+-mac ; XXX + needs bookmark+-mac
     :load-path "site-lisp"
     :config
     ;; Toggle an ANONYMOUS bookmark on the current line.
     (global-set-key (kbd "<C-f2>") #'bmkp-toggle-autonamed-bookmark-set/delete)
     (global-set-key (kbd "<S-f2>") #'bmkp-next-bookmark-this-file/buffer-repeat)
     ;; Delete all ANONYMOUS bookmarks in a buffer.
     (global-set-key (kbd "<C-S-f2>") #'bmkp-delete-all-autonamed-for-this-buffer)
   )

   (use-package helm
     :config
     ;; Helm for bookmarks (filtered by category).
      (global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
   )

   (when (fboundp 'helm-bookmarks)
     ;; View all bookmarks.
     (global-set-key (kbd "<M-f2>") #'helm-bookmarks))

   (use-package bookmark+
     :config
     (add-hook 'find-file-hook #'bmkp-light-this-buffer)

     ;; Priorities of bookmark highlighting overlay types.
     (setq bmkp-light-priorities '((bmkp-autonamed-overlays     . 150)
				   (bmkp-non-autonamed-overlays . 160)))

     ;; Symbols for the fringe bitmaps to use to highlight a bookmark.
     (setq bmkp-light-left-fringe-bitmap 'filled-square)
     (setq bmkp-light-right-fringe-bitmap 'filled-square)

     ;; Default highlight style for ANONYMOUS (= default) bookmarks.
     (setq bmkp-light-style-autonamed 'line+lfringe)

     ;; Default highlight style for bookmarks WITH MNEMONICS.
     (setq bmkp-light-style-non-autonamed 'line+lfringe)

     ;; Automatically highlight bookmarks when set.
     (setq bmkp-auto-light-when-set 'all-in-buffer)

     ;; Automatically highlight bookmarks when jumped to.
     (setq bmkp-auto-light-when-jump 'all-in-buffer)

     ;; Don't propertize bookmark names to hold full bookmark data.
     (setq bmkp-propertize-bookmark-names-flag nil)
				       ; We will often be going back and forth
				       ; between using Bookmark+ and using
				       ; vanilla Emacs.

     (setq bmkp-last-as-first-bookmark-file nil)

     ;; Name ANONYMOUS bookmarks with buffer name and line number.
     (setq bmkp-autoname-format "^%B:[0-9]+: %s")

     (setq bmkp-autoname-bookmark-function #'leuven-bmkp-autoname-line)

     (defun leuven-bmkp-autoname-line (position)
       "Name autonamed bookmark at POSITION using line number."
       (let ((line  (line-number-at-pos position)))
	 ;; (format "%s:%d (%s)" (buffer-name) line (buffer-file-name))
	 (format "%s:%d: %s"
		 (buffer-name)
		 line
		 (buffer-substring-no-properties
		  (line-beginning-position)
		  (1- (line-beginning-position 2))))))
  )
#+end_src

XXX They should always be in color when opening a buffer... not only when
jumping onto them...

** Avy (alternative to Ace Jump)

#+begin_src emacs-lisp
  (use-package avy
    :config
    ;; ;; Quickly jump to a position in the current view. XXX Conflict with Org mode (in tables).
    ;; (global-set-key (kbd "C-c SPC") #'avy-goto-word-or-subword-1)

    ;; Jump back to previous position.
    (global-set-key (kbd "C-c C-SPC") #'avy-pop-mark)

    ;; Jump during Isearch to one of the current candidates.
    (define-key isearch-mode-map (kbd "C-'") #'avy-isearch)
    ;; (define-key isearch-mode-map (kbd "@")   #'avy-isearch)
     ;; Default keys for jumping.
    (setq avy-keys (number-sequence ?a ?z))

    ;; Determine the list of windows to consider in search of candidates.
    (setq avy-all-windows 'all-frames)

    ;; Highlight the first decision char with `avy-lead-face-0'.
    (setq avy-highlight-first t)
  )
#+end_src
#+begin_src emacs-lisp
)                                       ; Chapter 13 ends here.
#+end_src

