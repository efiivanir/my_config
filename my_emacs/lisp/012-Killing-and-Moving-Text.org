* Killing and Moving Text

#+begin_src emacs-lisp
;;* 12 (info "(emacs)Killing") and Moving Text

(leuven--chapter leuven-load-chapter-12-killing "12 Killing and Moving Text"
#+end_src

** Deletion and Killing

- ~C-S-backspace~ ::
     Kill an entire line at once.

#+begin_src emacs-lisp
;;** 12.1 (info "(emacs)Deletion and Killing")

  (leuven--section "12.1 (emacs)Deletion and Killing")

  ;; Manipulate whitespace around point in a smart way.
  (global-set-key (kbd "M-SPC") #'cycle-spacing) ; vs `just-one-space'.
#+end_src

With the following gems, you can kill or copy the line point is on with a single
keystroke:

- ~C-w~ kills the current line
- ~M-w~ copies the current line

#+begin_note
If there is an active region, ~kill-region~ and ~kill-ring-save~ will continue to do
what they normally do: kill or copy it.
#+end_note

#+begin_src emacs-lisp
  ;; Add the ability to cut the current line without marking it (no selection).
  (defun kill-region--slick-cut (beg end &optional region)
    "When called with no active region, kill the current line instead."
    (interactive
     (if (use-region-p)
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))
  (advice-add 'kill-region :before #'kill-region--slick-cut)

  ;; Add the ability to copy the current line without marking it (no selection).
  (defun kill-ring-save--slick-copy (beg end &optional region)
    "When called with no active region, copy the current line instead."
    (interactive
     (if (use-region-p)
         (list (region-beginning) (region-end))
       (message "[Copied the current line]")
       (list (line-beginning-position) (line-beginning-position 2)))))
  (advice-add 'kill-ring-save :before #'kill-ring-save--slick-copy)
#+end_src

| Command        | Emacs | Sublime Text | TextMate |
|----------------+-------+--------------+----------|
| Duplicate line | C-S-d | C-S-d        | C-S-d    |

#+begin_src emacs-lisp
  (defun duplicate-current-line ()
    "Duplicate the line containing point."
    (interactive)
    (save-excursion
      (let (line-text)
        (goto-char (line-beginning-position))
        (let ((beg (point)))
          (goto-char (line-end-position))
          (setq line-text (buffer-substring beg (point))))
        (if (eobp)
            (insert ?\n)
          (forward-line))
        (open-line 1)
        (insert line-text))))

  (global-set-key (kbd "C-S-d") #'duplicate-current-line)
#+end_src

To *highlight duplicate lines*, see
https://emacs.stackexchange.com/questions/13092/how-can-i-highlight-duplicate-lines

In Emacs 24.4+, the cleanest way to *uniquify lines* (~uniq-lines~) is the
~delete-duplicate-lines~ function.

Note that:
- this works on a region, not a buffer, so select the desired text first,
- it maintains the relative order of the originals, killing the duplicates.

For example, if your input is:

#+begin_example
test
dup
dup
one
two
one
three
one
test
five
#+end_example

~M-x delete-duplicate-lines~ would make it:

#+begin_example
test
dup
one
two
three
five
#+end_example

That is, it does remove all *duplicate lines* in region, not only the *consecutive*
ones.

** Yanking

#+begin_src emacs-lisp
;;** 12.2 (info "(emacs)Yanking")

  (leuven--section "12.2 (emacs)Yanking")
#+end_src

Auto-indent on paste.

#+begin_src emacs-lisp
  ;; Auto-indentation of pasted code in the programming modes
  ;; (fall back to default, non-indented, yanking by preceding the yanking
  ;; command `C-y' with `C-u').
  (dolist (command '(yank
                     yank-pop))
    (eval `(defadvice ,command (after leuven-indent-region activate)
             "Indent `yank'ed text if programming mode (and no prefix)."
             (let ((mark-even-if-inactive t))
               (and (not current-prefix-arg)
                    (derived-mode-p 'prog-mode)
                    (indent-region (region-beginning) (region-end) nil))))))
#+end_src

#+begin_src emacs-lisp
  ;; Save clipboard strings into kill ring before replacing them.
  (setq save-interprogram-paste-before-kill t)

  ;; ;; Rotating the kill ring changes the window system selection.
  ;; (setq yank-pop-change-selection t)
#+end_src

*** Yanking Earlier Kills

Interactively insert items from kill ring with ~M-x helm-show-kill-ring~ (see
[[id:59418189-b87e-45a2-b128-5cbdc8a16430][Helm]]).

** Cutting and Pasting on Graphical Displays

#+begin_src emacs-lisp
;;** 12.3 (info "(emacs)Cut and Paste")

  (leuven--section "12.3 (emacs)Cut and Paste on Graphical Displays")

  ;; Make cut, copy and paste (keys and menu bar items) use the clipboard.
  (menu-bar-enable-clipboard)
#+end_src

Copy/paste from Windows clipboard in WSL Emacs:

#+begin_src emacs-lisp
  ;; wsl-copy
  (defun wsl-copy (start end)
    (interactive "r")
    (shell-command-on-region start end "clip.exe")
    (deactivate-mark))

  ;; Bind wsl-copy to C-c C-c
  (global-set-key (kbd "C-c C-c") 'wsl-copy)

  ;; wsl-paste
  (defun wsl-paste ()
    (interactive)
    (let ((clipboard
           (shell-command-to-string "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
      (setq clipboard (replace-regexp-in-string "\r" "" clipboard)) ; Remove Windows ^M characters
      (setq clipboard (substring clipboard 0 -1)) ; Remove newline added by Powershell
      (insert clipboard)))

  ;; Bind wsl-paste to C-c C-v
  (global-set-key (kbd "C-c C-v") 'wsl-paste)
#+end_src

See https://emacs.stackexchange.com/questions/39210/copy-paste-from-windows-clipboard-in-wsl-terminal
and xclip.el?

** Rectangles

To kill the text of a rectangular area (vertically selected text), use ~C-x r k~
(~kill-rectangle~).  Or just "delete" the "region-rectangle" (without "killing"
it) with ~C-x r d~.

To copy a (series of) Org column(s) while avoiding the use of registers:
1. select the region-rectangle,
2. use the command ~copy-rectangle-as-kill~ (bound to ~C-x r M-w~), then
3. paste the copied rectangle by doing ~yank-rectangle~ (~C-x r y~).

To do the same with registers:
1. select the region-rectangle,
2. use ~C-x r r R~ to copy the rectangle to the register named ~R~,
3. use ~C-x r i R~ to insert the rectangle that is being held in the register
   named ~R~.

To shift cells up/down within a column of an Org table while leaving remaining
columns intact, use ~kill-rectangle~ and ~yank-rectangle~.

To delete whitespace in each of the lines on the specified rectangle, use
~M-x delete-whitespace-rectangle~.

Use ~C-x r t STRING RET~ to replace each line of a region-rectangle with a given
string.

#+begin_note
Since Emacs 24.4, you can use ~rectangle-mark-mode~ (~C-x SPC~) and do:
- ~C-x SPC~ <...move around...> ~DEL~ to delete the rectangle and
- ~C-x SPC~ <...move around...> ~C-t~ to invoke ~string-rectangle~.
#+end_note

** CUA Bindings

CUA mode sets up key bindings used in many other applications (~C-x~, ~C-c~, ~C-v~ and
~C-z~).

The ~C-x~ and ~C-c~ keys only do cut and copy when the region is active, so in most
cases, they do not conflict with the normal function of these prefix keys.

If you really need to perform a command which starts with one of the prefix keys
even when the region is active, you have three options:

- press the prefix key twice very quickly (within 0.2 seconds),
- press the prefix key and the following key within 0.2 seconds, or
- use the Shift key with the prefix key, i.e. ~C-S-x~ or ~C-S-c~.

You can customize ~cua-enable-cua-keys~ to completely disable the CUA bindings, or
~cua-prefix-override-inhibit-delay~ to change the prefix fallback behavior.

CUA mode also provides enhanced rectangle support with visible rectangle
highlighting.  Though, since Emacs 24.4, ~rectangle-mark-mode~ is the new way.

- ~<C-RET>~ runs the command ~cua-set-rectangle-mark~
- ~M-n~ runs the command ~cua-sequence-rectangle~
  #+begin_src emacs-lisp
    (cua-mode t)
    (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
    (transient-mark-mode 1) ;; No region when it is not highlighted
    (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
    ;; shift + click select region
    (define-key global-map (kbd "<S-down-mouse-1>") 'ignore) ; turn off font dialog
    (define-key global-map (kbd "<S-mouse-1>") 'mouse-set-point)
    (put 'mouse-set-point 'CUA 'move)
  #+end_src

#+begin_src emacs-lisp
)                                       ; Chapter 12 ends here.
#+end_src

