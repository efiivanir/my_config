* Commands for Human Languages

#+begin_src emacs-lisp
;;* 25 Commands for (info "(emacs)Text") Human Languages

(leuven--chapter leuven-load-chapter-25-text "25 Commands for Human Languages"
#+end_src

** Words

#+begin_src emacs-lisp
;;** 25.1 (info "(emacs)Words")

  (leuven--section "25.1 (emacs)Words")
#+end_src

** Sentences

#+begin_src emacs-lisp
;;** 25.2 (info "(emacs)Sentences")

  (leuven--section "25.2 (emacs)Sentences")

  ;; ;; A single space does end a sentence.
  ;; (setq-default sentence-end-double-space nil) ; see `ispell-dictionary'
#+end_src

The default value of ~sentence-end-double-space~ is good for French as well, as
we put two spaces after a interrogation/question mark. That way, those two
spaces won't be transformed into one...

** Filling Text

There are several *no-break space* characters required for French punctuation:

- *No-break thin space* (~202F~), known in Unicode as "narrow no-break space",
  required before ~?~, ~!~ and ~;~.

- *No-break space* (~00A0~), required before ~:~ and ~»~, and required after ~«~.

  It can be inserted with ~S-SPC~:

  #+begin_src emacs-lisp
  (defun leuven-nbsp-command ()
    "Insert the no-break space character 00A0."
    (interactive)
    (insert-char ?\u00A0))

  (global-set-key (kbd "S-SPC") #'leuven-nbsp-command)
  #+end_src

They could be used to avoid breaking at certain bad places.

Another solution to avoid that is to add ~fill-french-nobreak-p~ to
~fill-nobreak-predicate~.

#+begin_src emacs-lisp
;;** 25.5 (info "(emacs)Filling") Text

  (leuven--section "25.5 (emacs)Filling Text")

  ;; Line-wrapping beyond that column (when pressing `M-q').
  (setq-default fill-column 80)

  ;; (Un-)fill paragraph.
  (defun leuven-fill-or-unfill-paragraph (count)
    "Like `fill-paragraph', but unfill if used twice."
    (interactive "P")
    (let ((fill-column
           (if count
               (prefix-numeric-value count)
             (if (eq last-command 'leuven-fill-or-unfill-paragraph)
                 (progn (setq this-command nil)
                        (point-max))
               fill-column))))
      (if (derived-mode-p 'org-mode)
          (org-fill-paragraph)
        (fill-paragraph))))

  ;; M-q.
  (global-set-key [remap fill-paragraph] #'leuven-fill-or-unfill-paragraph)
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "M-q") #'leuven-fill-or-unfill-paragraph))

  ;; Prevent breaking lines just before a punctuation mark such as `?' or `:'.
  (add-hook 'fill-nobreak-predicate #'fill-french-nobreak-p)

  ;; Activate Auto Fill for all text mode buffers.
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+end_src

#+begin_src emacs-lisp
  (defun leuven-replace-nbsp-by-spc ()
    "Replace all nbsp by normal spaces."
    (interactive "*")
    (save-excursion
      (save-restriction
        (save-match-data
          (progn
            (goto-char (point-min))
            (while (re-search-forward "[  ]" nil t)
              (replace-match " " nil nil)))))))
#+end_src

#+begin_src emacs-lisp
  (defun leuven-good-old-fill-paragraph ()
    (interactive)
    (let ((fill-paragraph-function nil)
          (adaptive-fill-function nil))
      (fill-paragraph)))
#+end_src

*************** TODO Replace ' by `' in Emacs Lisp and by `` in other modes
*************** END

#+begin_src emacs-lisp
  ;; (defun leuven-smart-punctuation-apostrophe ()
  ;;   "Replace second apostrophe by backquote in front of symbol."
  ;;   (interactive)
  ;;   (cond
  ;;    ((or (bolp) (not (looking-back "'")))
  ;;     ;; Insert just one '.
  ;;     (self-insert-command 1))
  ;;    ((save-excursion
  ;;       (backward-char)
  ;;       ;; Skip symbol backwards.
  ;;       (and (not (zerop (skip-syntax-backward "w_.")))
  ;;            (not (looking-back "`"))
  ;;            (or (insert-and-inherit "`") t))))
  ;;    (t
  ;;     ;; Insert `' around following symbol.
  ;;     (delete-char -1)
  ;;     (unless (looking-back "`") (insert-and-inherit "`"))
  ;;     (save-excursion
  ;;       (skip-syntax-forward "w_.")
  ;;       (unless (looking-at "'") (insert-and-inherit "'"))))))

  (defun leuven-smart-punctuation-quotation-mark ()
    "Replace two following double quotes by French quotes."
    (interactive)
    (let ((dict (or (when (boundp 'ispell-local-dictionary)
                      ispell-local-dictionary)
                    (when (boundp 'ispell-dictionary)
                      ispell-dictionary))))
      (message "[>>> %s]" major-mode)
      (cond
       ((and (string= dict "francais")
             (eq (char-before) ?\")
             (or (not (equal mode-name "Org"))
                 (not (member (org-element-type (org-element-at-point))
                              '(src-block keyword table dynamic-block)))))
        (backward-delete-char 1)
        (insert "«  »")
        (backward-char 2))
       ((and (eq (char-before) ?\")
             (derived-mode-p 'latex-mode))
        (backward-delete-char 1)
        (insert "\\enquote{}")
        (backward-char 1))
       (t
        (insert "\"")))))

  (defun leuven--smart-punctuation ()
    "Replace second apostrophe or quotation mark."
    ;; (local-set-key [39] #'leuven-smart-punctuation-apostrophe)
    (local-set-key "\"" #'leuven-smart-punctuation-quotation-mark))

  (add-hook 'text-mode-hook #'leuven--smart-punctuation)
  (add-hook 'message-mode-hook #'leuven--smart-punctuation)
#+end_src

#+begin_src emacs-lisp
    (use-package key-chord
      :config
      (key-chord-mode 1)
    ;; Map pairs of simultaneously pressed keys to commands.
      (key-chord-define-global "<<" #'(lambda () (interactive) (insert "«")))
      (key-chord-define-global ">>" #'(lambda () (interactive) (insert "»")))
      ;; (key-chord-define-global "hb" #'describe-bindings) ; dashboard.
      (key-chord-define-global "hf" #'describe-function)
      (key-chord-define-global "hv" #'describe-variable)
      (use-package expand-region
        :config
        (key-chord-define-global "hh" #'er/expand-region) ; Autoloaded.
        (key-chord-define-global "HH" #'er/contract-region) ; Autoloaded.
      )
      (use-package avy
        :config
        (key-chord-define-global "jj" #'avy-goto-word-or-subword-1)
      )
      (use-package dired-x
        :config
        (key-chord-define-global "xj" #'dired-jump)
      )
      (key-chord-define-global "vb" #'eval-buffer)
      ;; (key-chord-define-global "vg" #'eval-region) ; 2015-02-17 Crash Gnus `C-u g'

      ;; (key-chord-define-global "x0" #'delete-window) ; 2015-02-09 Crash Gnus `C-u 3'
      ;; (key-chord-define-global "x1" #'delete-other-windows) ; 2015-02-05 Crash Gnus `C-u 1'
      (key-chord-define-global "xh" #'mark-whole-buffer)
      (key-chord-define-global "xk" #'kill-buffer)
      (key-chord-define-global "xo" #'other-window) ; box...
      (key-chord-define-global "xs" #'save-buffer)

      (key-chord-define-global "yy" #'browse-kill-ring)
      (key-chord-define-global "zk" #'zap-to-char)

      (use-package hl-anything   ; Package.
        :config
        (key-chord-define-global "*o" #'hl-global-highlight-on/off)
        (key-chord-define-global "*h" #'hl-highlight-thingatpt-global)
        (key-chord-define-global "*u" #'hl-unhighlight-all-global)
        (key-chord-define-global "*n" #'hl-find-next-thing)
        (key-chord-define-global "*p" #'hl-find-prev-thing)
        (key-chord-define-global "*r" #'hl-restore-highlights)
        (key-chord-define-global "*s" #'hl-save-highlights)
      )

      (key-chord-define-global ";s" #'set-mark-command)

      ;; (key-chord-define-global "ac" #'align-current)
      ;; (key-chord-define-global "fc" #'flycheck-mode)
      ;; (global-set-key (kbd "M-2") #'highlight-symbol-occur)
      ;; (global-set-key (kbd "M-3") #'(lambda () (interactive) (highlight-symbol-jump -1)))
      ;; (global-set-key (kbd "M-4") #'(lambda () (interactive) (highlight-symbol-jump 1)))
      ;; (key-chord-define-global "vg" #'vc-git-grep)

      ;; (key-chord-define-global "''" "`'\C-b")
      ;; (key-chord-define-global "dq" "\"\"\C-b")
      ;; (key-chord-define-global ";d" #'dired-jump-other-window)
      ;; (key-chord-define-global "jk" #'dabbrev-expand)
      ;; (key-chord-define-global "JJ" #'xref-find-definitions)
      ;; (key-chord-define-global ",." "<>\C-b")
      ;; (key-chord-define-global "''" "`'\C-b")
      ;; (key-chord-define-global ",," #'indent-for-comment)
      )
#+end_src

** Case Conversion Commands

#+begin_src emacs-lisp
;;** 25.6 (info "(emacs)Case") Conversion Commands

  (leuven--section "25.6 (emacs)Case Conversion Commands")

  ;; Enable the use of some commands without confirmation.
  (mapc #'(lambda (command)
          (put command 'disabled nil))
        ;; Disabled commands.
        '(downcase-region
          upcase-region))
#+end_src

** Outline Mode
:PROPERTIES:
:ID:       42ad895e-c049-4710-a877-5014a7f6acfc
:END:

Outline is line-oriented and does not distinguish end-of-block.

#+begin_src emacs-lisp
;;** 25.8 (info "(emacs)Outline Mode")

  (leuven--section "25.8 (emacs)Outline Mode")
#+end_src

*** TODO outline-minor-mode (inside plain latex-mode as well)

Though Outline minor mode has NOTHING to do with folding of code as such, some
people have the following code in their ~ruby-mode-hook~ to enable code folding
using ~outline-minor-mode~ + ~outline-magic~.

#+begin_example
(outline-minor-mode 1)
(set (make-local-variable 'outline-regexp) "^[ \t]*\\(?:def\\|class\\|module\\)\\|^[ \t]*###==")
#+end_example

Outline minor mode is also used to collapse Lisp code (i.e., to see in the
buffer just the definition of a function instead of the whole body).

See also the library [[id:a36b1dbd-1d05-4ff2-b19a-167e50c4f1f7][hs-minor-mode]].

You can use ~org-cycle~ in other modes, with ~outline-minor-mode~.

See https://github.com/zk-phi/dotfiles/blob/master/emacs/init.el.

#+begin_src emacs-lisp
  ;; Outline mode commands for Emacs.
  (use-package outline
    :config
    ;; Bind the outline minor mode functions to an easy to remember prefix
    ;; key (more accessible than the horrible prefix `C-c @').
    (setq outline-minor-mode-prefix (kbd "C-c C-o")) ; like in nXML mode

    ;; ;; Make other `outline-minor-mode' files (LaTeX, etc.) feel the Org
    ;; ;; mode outline navigation (written by Carsten Dominik).
    ;; (try-require 'outline-magic)
    ;; (with-eval-after-load "outline-magic"
    ;;   (add-hook 'outline-minor-mode-hook
    ;;             #'(lambda ()
    ;;               (define-key outline-minor-mode-map
    ;;                 (kbd "<S-tab>") #'outline-cycle)
    ;;               (define-key outline-minor-mode-map
    ;;                 (kbd "<M-left>") #'outline-promote)
    ;;               (define-key outline-minor-mode-map
    ;;                 (kbd "<M-right>") #'outline-demote)
    ;;               (define-key outline-minor-mode-map
    ;;                 (kbd "<M-up>") #'outline-move-subtree-up)
    ;;               (define-key outline-minor-mode-map
    ;;                 (kbd "<M-down>") #'outline-move-subtree-down))))

    ;; ;; Extra support for outline minor mode.
    ;; (try-require 'out-xtra)


    ;; Org-style folding for a `.emacs' (and much more).

    ;; FIXME This should be in an `eval-after-load' of Org, so that
    ;; `org-level-N' are defined when used

    (defun leuven--outline-regexp ()
      "Calculate the outline regexp for the current mode."
      (let ((comment-starter (replace-regexp-in-string
                              "[[:space:]]+" "" comment-start)))
        (when (string= comment-start ";")
          (setq comment-starter ";;"))
        ;; (concat "^" comment-starter "\\*+")))
        (concat "^" comment-starter "[*]+ ")))

    ;; Fontify the whole line for headings (with a background color).
    (setq org-fontify-whole-heading-line t)

    (defun leuven--outline-minor-mode-hook ()
      (setq outline-regexp (leuven--outline-regexp))
      (let* ((org-fontify-whole-headline-regexp "") ; "\n?")
             (heading-1-regexp
              (concat (substring outline-regexp 0 -1)
                      "\\{1\\} \\(.*" org-fontify-whole-headline-regexp "\\)"))
             (heading-2-regexp
              (concat (substring outline-regexp 0 -1)
                      "\\{2\\} \\(.*" org-fontify-whole-headline-regexp "\\)"))
             (heading-3-regexp
              (concat (substring outline-regexp 0 -1)
                      "\\{3\\} \\(.*" org-fontify-whole-headline-regexp "\\)"))
             (heading-4-regexp
              (concat (substring outline-regexp 0 -1)
                      "\\{4,\\} \\(.*" org-fontify-whole-headline-regexp "\\)")))
        (font-lock-add-keywords nil
         `((,heading-1-regexp 1 'org-level-1 t)
           (,heading-2-regexp 1 'org-level-2 t)
           (,heading-3-regexp 1 'org-level-3 t)
           (,heading-4-regexp 1 'org-level-4 t)))))

    (add-hook 'outline-minor-mode-hook #'leuven--outline-minor-mode-hook)

    ;; Add the following as the top line of your `.emacs':
    ;;
    ;; ; -*- mode: emacs-lisp; eval: (outline-minor-mode 1); -*-
    ;;
    ;; Now you can add `;;' and `;;*', etc. as headings in your `.emacs'
    ;; and cycle using `<S-tab>', `<M-left>' and `<M-right>' will collapse
    ;; or expand all headings respectively.  I am guessing you mean to make
    ;; segments such as `;; SHORTCUTS' and `;; VARIABLES', this will do
    ;; that, but not too much more.
    )
#+end_src

For Emacs Lisp, Stefan Monnier additionally uses:

#+begin_src emacs-lisp
    (add-hook 'outline-minor-mode-hook
              #'(lambda ()
                  (when (and outline-minor-mode (derived-mode-p 'emacs-lisp-mode))
                    (hide-sublevels 1000))))
#+end_src

which starts outline-minor-mode by hiding all the bodies of functions.

He also uses ~reveal-mode~ which automatically unhides the bodies when you try to
move the cursor into them (so you don't need to remember the key sequences to
use for opening/closing elements).

*** org-global-cycle + outline-magic

The visibility-cycling features are written in a way that they are independent
of the outline setup.  The following setup provides standard Org mode
functionality (headline folding and unfolding) in ~outline-minor-mode~ on
~C-TAB~ and ~S-TAB~.  We use ~C-TAB~ instead of ~TAB~, because ~TAB~ usually
has mode-specific tasks.

Note that for ~C-TAB~ to work, the cursor needs to be on a headline (the line
where the ellipsis shows).

#+begin_src emacs-lisp
  ;; (add-hook 'outline-minor-mode-hook
  ;;   #'(lambda ()
  ;;     (define-key outline-minor-mode-map (kbd "<C-tab>") #'org-cycle)
  ;;     (define-key outline-minor-mode-map (kbd "<S-tab>") #'org-global-cycle))) ; backtab?
#+end_src

Now doing

    M-x find-library RET ox.el RET

    S-TAB (one or more times)

will give you a give quick overview of all the function names.

Or check out ~outline-magic.el~, which does this and also provides *promotion and
demotion* functionality.

*** org

#+begin_src emacs-lisp
  ;; Cycle globally if cursor is at beginning of buffer and not at a headline.
  (setq org-cycle-global-at-bob t)

  ;; (setq org-cycle-level-after-item/entry-creation nil)

  ;; ;; ‘org-cycle’ should never emulate TAB.
  ;; (setq org-cycle-emulate-tab nil)

  (global-set-key (kbd "<S-tab>") #'org-cycle) ; that works (but on level 1+)
  ;; (global-set-key (kbd "S-<tab>") (kbd "C-u M-x org-cycle")) ; that works (but on level 1+)

  ;; TODO Look at org-cycle-global and local below, they work better, but
  ;; still on level 1+
  ;; TODO Replace it by a function which alternatively does `hide-body' and
  ;; `show-all'
#+end_src

*** org-struct-mode

> Experienced users use outline-minor-mode - It takes time to getting used to
> it.

You can also use ~orgalist~, a package that provides Org mode's plain lists in
non-Org buffers?

~org-global-cycle~ (!= ~org-cycle-global~) now works fine in buffers using
~orgstruct-mode~.

As for handling "large" files, I use this:

#+begin_src emacs-lisp
  ;; from Bastien

  ;; ;; XXX 2010-06-21 Conflicts with outline-minor-mode bindings
  ;; ;; add a hook to use `orgstruct-mode' in Emacs Lisp buffers
  ;; (add-hook 'emacs-lisp-mode-hook #'orgstruct-mode)

  (defun org-cycle-global ()
    (interactive)
    (org-cycle t))

  (global-set-key (kbd "C-M-]") #'org-cycle-global)
                                        ; XXX ok on Emacs Lisp, not on LaTeX
                                        ; S-TAB?

  ;; (defun org-cycle-local ()
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (move-beginning-of-line nil)
  ;;     (org-cycle)))

  (defun org-cycle-local ()
    (interactive)
    (ignore-errors
      (end-of-defun)
      (beginning-of-defun))
    (org-cycle))

  (global-set-key (kbd "M-]") #'org-cycle-local)
                                        ; XXX ok on Emacs Lisp, not on LaTeX

;; C-M-] and M-] fold the whole buffer or the current defun.
#+end_src

I made a video to demonstrate it quickly: [[https://vimeo.com/55570133][navigating-emacs]].

This helps me survive in files like ~org.el~ and ~org-agenda.el~.

*** fold-dwim

#+begin_src emacs-lisp :tangle no
  ;; (global-set-key (kbd "C-c +") #'fold-dwim-toggle)
  ;; (global-set-key (kbd "C-c C-+") #'fold-dwim-show-all)
  ;; (global-set-key (kbd "C-c C--") #'fold-dwim-hide-all)
#+end_src

*** fold-dwim-org

#+begin_src emacs-lisp
  ;; ;; Unified user interface for Emacs folding modes, bound to Org key-strokes.
  ;; (try-require 'fold-dwim-org)
#+end_src

#+begin_src emacs-lisp
  ;; 25.8.2
  ;; Toggle display of invisible text.
  (defun leuven-toggle-show-everything (&optional arg)
    "Show all invisible text."
    (interactive (list (or current-prefix-arg 'toggle)))
    (if (derived-mode-p 'prog-mode)
        (hs-show-all)
      (visible-mode arg)))

  (global-set-key (kbd "M-A") #'leuven-toggle-show-everything) ; `M-S-a'.
#+end_src

#+begin_src emacs-lisp :tangle no
(defvar hs-hide-all nil "Current state of hideshow for toggling all.")
(make-local-variable 'hs-hide-all)

(defun hs-toggle-hiding-all ()
  "Toggle hideshow all."
  (interactive)
  (setq hs-hide-all (not hs-hide-all))
  (if hs-hide-all
      (hs-hide-all)
    (hs-show-all)))
#+end_src

** Boxquote

Use Unicode characters.

#+begin_src emacs-lisp
    ;;** (info "(emacs-goodies-el)boxquote")

      (leuven--section "(emacs-goodies-el)boxquote")

      (use-package boxquote
        :config
        (global-set-key (kbd "C-c q") #'boxquote-region)
        (setq boxquote-top-and-tail  "────")
        (setq boxquote-title-format  " %s")
        (setq boxquote-top-corner    "  ┌")
        (setq boxquote-side          "  │ ")
        (setq boxquote-bottom-corner "  └")
     )
#+end_src

In Gnus, you can mark some region with enclosing tags by pressing ~C-c M-m~
(~message-mark-inserted-region~) or by clicking on ~<menu-bar> <Message> <Insert
Region Marked>~.

#+begin_example
--8<---------------cut here---------------start------------->8---
...
...
...
--8<---------------cut here---------------end--------------->8---
#+end_example

** Phonetic

#+begin_src emacs-lisp
;;** (info "phonetic")

  (leuven--section "phonetic")

  ;; Phonetic spelling.
  (when (locate-library "phonetic")
    (autoload 'phonetize-region "phonetic"
      "Translate the region according to the phonetic alphabet." t))
#+end_src

#+begin_src emacs-lisp
)                                       ; Chapter 25 ends here.
#+end_src


* TeX

#+begin_src emacs-lisp
;;** 25.11 (info "(emacs)TeX Mode")

(leuven--chapter leuven-load-chapter-25.11-tex-mode "25.11 TeX Mode"
#+end_src

#+begin_warning
Emacs ships with =tex-mode.el= but that's a separate thing from AUCTeX.  All
AUCTeX functions start with ~TeX-*~ or ~LaTeX-*~ (case matters) or ~font-latex-*~.
#+end_warning

** Native TeX Mode

- ~tex-mode~ or ~latex-mode~ ::
     Default Emacs built-in (La)TeX mode (menu ~TeX~; text ~LaTeX~ displayed in the
     mode line).

#+begin_src emacs-lisp
  (leuven--section "25.11 (emacs)TeX Mode")
#+end_src

Under Windows, in the *native* TeX mode, ~shell-file-name~ must be =cmdproxy.exe= to:

- avoid the error "comint-send-string: writing to process: invalid argument,
  tex-shell", and

- properly quote ~tex-start-commands~.

#+begin_src emacs-lisp
  ;; Get colored PDFLaTeX output.
  (define-derived-mode latex-output-mode fundamental-mode "LaTeX-Output"
    "Simple mode for colorizing LaTeX output."
    (set (make-local-variable 'font-lock-defaults)
         '((("^!.*" .
             compilation-error-face)    ; LaTeX error
            ("^-+$" .
             compilation-info-face)     ; Latexmk separator
            ("^Package .* Warning: .*" .
             compilation-warning-face)
            ("Reference .* undefined" .
             compilation-warning-face)
            ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" .
             font-lock-string-face)
            ("^LaTeX Font Warning:" .
             font-lock-string-face)
            ;; ...
            ))))

  (defadvice TeX-recenter-output-buffer
    (after leuven-colorize-latex-output activate)
    (with-selected-window (get-buffer-window (TeX-active-buffer))
      (latex-output-mode)))
#+end_src

** AUCTeX

- ~TeX-mode~ or ~LaTeX-mode~ ::
     AUCTeX (menus ~Preview~, ~LaTeX~, ~Command~ and ~Ref~; text ~LaTeX/P~ displayed in
     the mode line).

AUCTeX supports TeX and extensions such as LaTeX.  For LaTeX, there is a
(major) ~LaTeX-mode~ in AUCTeX which runs (in this order):

1. ~text-mode-hook~, then
2. ~TeX-mode-hook~, and then
3. a hook ~LaTeX-mode-hook~ special to the LaTeX mode.

If you need to make a customization via a hook which is only relevant for the
LaTeX mode, put it into the ~LaTeX-mode-hook~; if it is relevant for any AUCTeX
mode, add it to ~TeX-mode-hook~ and if it is relevant for all text modes, append
it to ~text-mode-hook~.

AUCTeX defines the ~tex-mode.el~ mode names as alias of its own modes: it
aliases ~(la)tex-mode~ to ~(La)TeX-mode~.

#+begin_src emacs-lisp
    (leuven--section "25.11 (emacs)AUCTeX Mode")

  ;;** 1.2 (info "(auctex)Installation") of AUCTeX

    (try-require 'tex-site) ; XXX

    ;; Support for LaTeX documents.
    (use-package latex
      :config
#+end_src

You can detect the *successful activation of AUCTeX*: after loading a LaTeX
file, AUCTeX gives you a ~Command~ menu.

- Press ~C-c C-c File RET RET~ to run ~dvips~ (note that the command is ~File~ and
  not ~Dvips~ as one might expect)

- Press ~C-c C-c Print RET RET~ to run ~GSview~ (also somewhat misleading name)

- If you want to print the document, do it from ~GSview~.

#+begin_src emacs-lisp
    ;; ;; LaTeX-sensitive spell checking
    ;; (add-hook 'tex-mode-hook
    ;;           #'(lambda ()
    ;;             (make-local-variable 'ispell-parser)
    ;;             (setq ispell-parser 'tex)))
#+end_src

#+begin_src emacs-lisp
;;** 2.1 (info "(auctex)Quotes")

    (leuven--section "2.1 (auctex)Quotes")

    ;; Insert right brace with suitable macro after typing left brace.
    (setq LaTeX-electric-left-right-brace t)

;;** 2.6 (info "(auctex)Completion")

    (leuven--section "2.6 (auctex)Completion")

    ;; If this is non-nil when AUCTeX is loaded, the TeX escape character `\'
    ;; will be bound to `TeX-electric-macro'.
    (setq TeX-electric-escape t)

;;** 2.8 (info "(auctex)Indenting")

    (leuven--section "2.8 (auctex)Indenting")

    ;; Leave some environments un-indented when doing `M-q'.
    (add-to-list 'LaTeX-indent-environment-list '("tikzpicture" current-indentation))
    (add-to-list 'LaTeX-indent-environment-list '("comment"     current-indentation))
    (add-to-list 'LaTeX-indent-environment-list '("sverbatim"   current-indentation))

    ;; Auto-indentation (suggested by the AUCTeX manual -- instead of adding
    ;; a local key binding to `RET' in the `LaTeX-mode-hook').
    (setq TeX-newline-function 'newline-and-indent)
#+end_src

#+begin_src emacs-lisp
;;** 4.1 Executing (info "(auctex)Commands")

    (leuven--section "4.1 Executing (auctex)Commands")

    ;; Add a command to execute on the LaTeX document.
    (add-to-list 'TeX-command-list
                 '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))

    ;; (add-to-list 'TeX-command-list
    ;;              '("latexmk" "(run-latexmk)"
    ;;                TeX-run-function nil t :help "Run latexmk") t)
    ;; (setq TeX-command-default "latexmk")

    (defun leuven--LaTeX-mode-hook ()

      ;; Default command to run in the LaTeX buffer.
      (setq TeX-command-default         ; TeX-engine?
            (save-excursion
              (save-restriction
                (widen)
                (goto-char (point-min))
                (let ((re (concat
                           "^\\s-*\\\\usepackage\\(?:\\[.*\\]\\)?"
                           "{.*\\<\\(?:font\\|math\\)spec\\>.*}")))
                  (save-match-data
                    (if (re-search-forward re 3000 t)
                        "XeLaTeX"
                      "LaTeX"))))))

      ;; Minor mode for hiding and revealing macros and environments.
      (TeX-fold-mode t))

    (add-hook 'LaTeX-mode-hook #'leuven--LaTeX-mode-hook)

    (defun leuven--change-dict-to-fr ()
      "Change the local dictionary to French if babel package is set to French."
      (interactive)
      (when (string-equal (file-name-extension (buffer-file-name)) "tex")
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "\\(documentclass.*french\\|usepackage.*french.*babel\\)" nil t)
            (message "Switched dictionary to francais")
            (sit-for 0.5)
            (ispell-change-dictionary "francais")
            (force-mode-line-update)
            (when flyspell-mode
              (flyspell-buffer))))))

    (add-hook 'LaTeX-mode-hook #'leuven--change-dict-to-fr)

    ;; Don't ask user for permission to save files before starting TeX.
    (setq TeX-save-query nil)

    (defun TeX-default ()
      "Choose the default command from `C-c C-c'."
      (interactive)
      (TeX-save-document "")          ; or just use `TeX-save-query'
      (execute-kbd-macro (kbd "C-c C-c RET")))

    ;; Rebind the "compile command" to default command from `C-c C-c' (in LaTeX
    ;; mode only).
    (define-key LaTeX-mode-map (kbd "<f9>") #'TeX-default)

    ;; Use PDF mode by default (instead of DVI).
    (setq-default TeX-PDF-mode t)
#+end_src

A decent viewer reloads the PDF automatically when the file has changed while
staying on the same page (no need to close & reopen).

Support for forward search with PDF files means that the viewer jumps to the
page in the output file corresponding to the position in the source file.
Currently, this only works if you use the pdfsync LaTeX package and xpdf or
SumatraPDF as your PDF viewer.

#+begin_src emacs-lisp
;;** 4.2 (info "(auctex)Viewing") the formatted output

    (leuven--section "4.2 (auctex)Viewing the formatted output")

    (defvar leuven--sumatrapdf-command
      (concat leuven--windows-program-files-dir "SumatraPDF/SumatraPDF.exe")
      "Path to the SumatraPDF executable.")

    ;; Incompatible with TeX 13. Viewer configuration is now only supported via
    ;; TeX-view-program-selection.
    ;; ;; Use a saner PDF viewer (evince, SumatraPDF).
    ;; (setcdr (assoc "^pdf$" TeX-output-view-style)
    ;;         (cond ((or leuven--win32-p leuven--cygwin-p)
    ;;                `("." (concat "\"" ,leuven--sumatrapdf-command "\" %o")))
    ;;               (t
    ;;                '("." "evince %o"))))

    ;; For AUCTeX 11.86+.
    (when (or leuven--win32-p leuven--cygwin-p)
      (when (boundp 'TeX-view-program-list)
        (add-to-list 'TeX-view-program-list
                     `("SumatraPDF"
                       ,(list (concat "\"" leuven--sumatrapdf-command "\" %o"))))))

    (when (or leuven--win32-p leuven--cygwin-p)
      (setcdr (assoc 'output-pdf TeX-view-program-selection)
              '("SumatraPDF")))
#+end_src

#+begin_tip
Under Windows, we could open the PDF file with ~start "" xxx.pdf~ (in a command
prompt).
#+end_tip

#+begin_src emacs-lisp
;;** 4.7 (info "(auctex)Documentation")
#+end_src

~C-c ?~ (or ~M-x TeX-doc~) displays documentation for a package.

*************** TODO TeX-doc does not provide a list of available keywords for completion
Nor a default when point is on a command name...
*************** END

#+begin_src emacs-lisp
;;** 5.2 (info "(auctex)Multifile") Documents

    ;; ;; Assume that the file is a master file itself.
    ;; (setq-default TeX-master t)

;;** 5.3 Automatic (info "(auctex)Parsing Files")

    ;; Enable parse on load (if no style hook is found for the file).
    (setq TeX-parse-self t)

    ;; Enable automatic save of parsed style information when saving the buffer.
    (setq TeX-auto-save t)

;;** 5.4 (info "(auctex)Internationalization")

    ;; ;; XXX Insert a literal hyphen.
    ;; (setq LaTeX-babel-insert-hyphen nil)

;;** 5.5 (info "(auctex)Automatic") Customization

    ;; TODO Add beamer.el to TeX-style-path

;;*** 5.5.1 (info "(auctex)Automatic Global") Customization for the Site

    (leuven--section "5.5.1 (auctex)Automatic Global Customization for the Site")

    ;; Directory containing automatically generated TeX information.
    (setq TeX-auto-global
          (concat user-emacs-directory "auctex-auto-generated-info/"))
                                        ; Must end with a slash.

;;*** 5.5.3 (info "(auctex)Automatic Local") Customization for a Directory

    (leuven--section "5.5.3 (auctex)Automatic Local Customization for a Directory")

    ;; Directory containing automatically generated TeX information.
    (setq TeX-auto-local (concat user-emacs-directory "auctex-auto-generated-info/"))
                                        ; Must end with a slash.
#+end_src

** Preview-LaTeX

You can detect the successful activation of ~preview-latex~: after loading a
LaTeX file, ~preview-latex~ gives you a ~Preview~ menu.

#+begin_src emacs-lisp
;;** (info "(preview-latex)Top")

    (leuven--section "(preview-latex)Top")

    (with-eval-after-load "preview"

      ;; Path to `gs' command (for format conversions).
      (setq preview-gs-command
        (cond (leuven--win32-p
               (or (executable-find "gswin32c.exe")
                   "C:/texlive/2015/tlpkg/tlgs/bin/gswin32c.exe"))
                                        ; Default value.
              (t
               (or (executable-find "rungs") ; For Cygwin Emacs.
                   "/usr/bin/gs"))))
      (leuven--file-exists-and-executable-p preview-gs-command)

      ;; Scale factor for included previews.
      (setq preview-scale-function 1.2))
#+end_src

#+begin_note
This is also called when exporting from Org to PDF.  Why?

To show it, just edit the path to ~gswin32c~ and you'll see a message "Can't find
executable" in the echo area.
#+end_note

** RefTeX

AUCTeX is fantastic, and RefTeX just makes things better.

To fill in ~\ref{}~ and ~\cite{}~ commands, you can use ~C-c &~
(~reftex-view-crossref~).

*************** TODO Conflict with YASnippet prefix key and ~org-mark-ring~-push
*************** END

A Table of Contents of the entire (multifile) document with browsing
capabilities is available with ~C-c =~.  Hitting ~l~ there will show all the labels
and cites.

Labels can be created with ~C-c (~ and referenced with ~C-c )~.  When referencing,
you get a menu with all labels of a given type and context of the label
definition.  The selected label is inserted as a ~\ref~ macro.

Citations can be made with ~C-c [~ which will use a regular expression to pull out
a *formatted* list of articles from your BibTeX database.  The selected citation
is inserted as a ~\cite~ macro.

Index entries can be made with ~C-c /~ which indexes the word at point or the
current selection.  More general index entries are created with ~C-c <~.
~C-c >~ displays the compiled index.

#+begin_src emacs-lisp
    (add-hook 'LaTeX-mode-hook #'reftex-mode) ; with AUCTeX LaTeX mode

    ;; Minor mode with distinct support for `\label', `\ref', `\cite' and
    ;; `\index' in LaTeX.
    (with-eval-after-load "reftex"

      ;; Turn all plug-ins on.
      (setq reftex-plug-into-AUCTeX t)

      ;; Use a separate selection buffer for each label type -- so the menu
      ;; generally comes up faster.
      (setq reftex-use-multiple-selection-buffers t))
#+end_src

** BibTeX

#+begin_src emacs-lisp
    ;; BibTeX mode.
    (with-eval-after-load "bibtex"

      ;; Current BibTeX dialect.
      (setq bibtex-dialect 'biblatex))

    )                                   ; with-eval-after-load "latex" ends here.
#+end_src

#+begin_src emacs-lisp
)                                       ; Chapter 25.11-tex-mode ends here.
#+end_src

* SGML and HTML Modes

#+begin_src emacs-lisp
(leuven--chapter leuven-load-chapter-25-text "25 Commands for Human Languages"

;;** 25.12 (info "(emacs)HTML Mode")

  (leuven--section "25.12 (emacs)HTML Mode")
#+end_src

** HTML

*** html-mode

The default HTML mode, derived from SGML mode (see the HTML and SGML menus),
works quite well for editing HTML4 documents (whose tags don't have to close).

- ~C-c C-v~ ::
     *View* your file *in your browser* (~browse-url-of-buffer~).

- ~C-c C-b~ (or ~C-c <left>~) ::
     Jump to the opening HTML tag (~sgml-skip-tag-backward~).

- ~C-c C-f~ (or ~C-c <right>~) ::
     Jump to the closing HTML tag (~sgml-skip-tag-forward~).

- ~C-c TAB~ ::
     Hide all of the angle-bracketed tags in the buffer (~sgml-tags-invisible~).
     This can be used as a cheap *preview* of *just the bare text*.

- ~C-c /~ ::
     ~sgml-close-tag~.

- ~C-M-i~ ::
     ~ispell-complete-word~.

*** html-helper-mode

You might also want to consider ~html-helper-mode~, which has a lot more
features than plain ~html-mode~:

- autocompletion,
- auto-insertion of closing tags... and
- a lot more.

When you open a buffer for HTML editing, a didactic HTML menu appears, so you
can use your mouse to invoke commands.

Using the prefix-arg (~C-u~) to relevant HTML tags, ~html-helper-mode~ will put
tags around a region you've specified.

#+begin_src emacs-lisp
  (when (locate-library "html-helper-mode")

    (autoload 'html-helper-mode "html-helper-mode"
      "Mode for editing HTML documents." t)

    ;; Invoke html-helper-mode automatically on .html files.
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . html-helper-mode))

    ;; Invoke html-helper-mode automatically on .asp files.
    (add-to-list 'auto-mode-alist '("\\.asp\\'" . html-helper-mode))

    ;; Invoke html-helper-mode automatically on .jsp files.
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . html-helper-mode)))
#+end_src

** XHTML

[[id:786a2051-476a-4277-82df-d8ebf8ba0e99][nXML]] seems to be the most recommended mode to view and edit well-formed *XHTML*
(reformulation of HTML as an XML application).

#+begin_src emacs-lisp :tangle no
  (add-to-list 'auto-mode-alist '("\\.xhtml?\\'" . xml-mode))
                                        ; Alias for `nxml-mode'.
#+end_src

Alternatively, you can use [[http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html][nXhtml]] mode, derived from nXML mode.  It adds a lot
of things useful for *XHTML* files with mixed content:

- handling *multiple major modes* (Mumamo) in one buffer (for CSS, JS, PHP and
  similar things): get the correct syntax highlighting and indentation for
  each of them,
- folding,
- improved interface to Tidy (?),
- etc.

Though, it takes a while to load.

** web-mode

[[http://web-mode.org/][web-mode]] is another alternative for editing HTML documents embedding CSS/JS and
blocks (client/server side).

#+begin_src emacs-lisp
  (with-eval-after-load "web-mode-autoloads"
    (add-to-list 'auto-mode-alist '("\\.aspx\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.axvw\\'"   . web-mode)) ; ARCHIBUS view.
    (add-to-list 'auto-mode-alist '("\\.html?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'"    . web-mode))
    (add-to-list 'auto-mode-alist '("\\.x[ms]l\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xhtml?\\'" . web-mode)))

  ;; Major mode for editing web templates.
  (with-eval-after-load "web-mode"

    (define-key web-mode-map (kbd "C--")      #'web-mode-fold-or-unfold)
    (define-key web-mode-map (kbd "C-+")      #'web-mode-fold-or-unfold)
    (define-key web-mode-map (kbd "M-(")      #'web-mode-element-wrap)

    (define-key web-mode-map (kbd "M-h")      #'web-mode-mark-and-expand)

    ;; Moving.
    (define-key web-mode-map (kbd "M-n")      #'web-mode-tag-next)
    (define-key web-mode-map (kbd "C-M-e")    #'web-mode-element-end)
    (define-key web-mode-map (kbd "M-<down>") #'web-mode-element-sibling-next) ;; end or next? XXX

    (define-key web-mode-map (kbd "M-p")      #'web-mode-tag-previous)
    (define-key web-mode-map (kbd "C-M-p")    #'web-mode-tag-previous)
    (define-key web-mode-map (kbd "C-M-a")    #'web-mode-element-previous)
    (define-key web-mode-map (kbd "M-<up>")   #'web-mode-element-sibling-previous)

    (define-key web-mode-map (kbd "C-M-u")    #'web-mode-element-parent)

    (define-key web-mode-map (kbd "C-M-d")    #'web-mode-element-child)


(defun web-mode-edit-element-elements-end-inside ()
  (interactive)
  (web-mode-element-end)
  (backward-char))

(defun web-mode-edit-element-utils-x-position (fx)
  (save-excursion
    (funcall fx)
    (point)))

(defun web-mode-edit-element-utils-fnil (val f)
  (if val val
    (funcall f)))

(defun web-mode-edit-element-elements-sibling-next-p ()
  (let ((parent-position
         (web-mode-edit-element-utils-fnil
          (save-excursion
            (web-mode-element-beginning)
            (web-mode-element-parent-position))
          'point))
        (tag-next-position
         (web-mode-edit-element-utils-x-position
          (lambda ()
            (web-mode-edit-element-elements-end-inside)
            (web-mode-tag-next)
            (web-mode-element-beginning)))))
    (not (= parent-position tag-next-position))))




(defun web-mode-edit-element-elements-sibling-next-or-next-parent ()
  (interactive)
  (if (web-mode-edit-element-elements-sibling-next-p)
      (web-mode-element-sibling-next)
    (web-mode-element-parent)
    (web-mode-element-sibling-next)))


    (define-key web-mode-map (kbd "M-<down>") #'web-mode-edit-element-elements-sibling-next-or-next-parent)





;; XXX What about Fold Tag Attributes?

;; C-M-a           c-beginning-of-defun
;; C-M-e           c-end-of-defun
;; C-M-h           c-mark-function
;; C-M-j           c-indent-new-comment-line
;; C-M-q           c-indent-exp
;; M-a             c-beginning-of-statement
;; M-e             c-end-of-statement
;; M-j             c-indent-new-comment-line
;; M-q             c-fill-paragraph

    ;; Script element left padding.
    (setq web-mode-script-padding
          (if (and (boundp 'standard-indent) standard-indent) standard-indent 4))

    ;; Style element left padding.
    (setq web-mode-style-padding
          (if (and (boundp 'standard-indent) standard-indent) standard-indent 4))

    ;; CSS indentation level.
    (setq-default web-mode-css-indent-offset
                  (if (and (boundp 'standard-indent) standard-indent) standard-indent 4))

    (setq-default web-mode-attr-indent-offset
                  (if (and (boundp 'standard-indent) standard-indent) standard-indent 4))

    ;; Code (JavaScript, php, etc.) indentation level.
    (setq-default web-mode-code-indent-offset
                  (if (and (boundp 'standard-indent) standard-indent) standard-indent 4))
                                        ; XXX Check out ab-pm-cf-wr-newother.axvw.

    ;; Auto-pairing.
    (setq web-mode-enable-auto-pairing t)

    ;; Enable element highlight.
    (setq web-mode-enable-current-element-highlight t) ; web-mode-current-element-highlight-face.

    ;; Enable block face (useful for setting background of <style>).
    (setq web-mode-enable-block-face t) ; web-mode-block-face.

    ;; Enable part face (useful for setting background of <script>).
    (setq web-mode-enable-part-face t) ; web-mode-part-face.

    ;; ;; Comment style : 1 = default, 2 = force server comments outside a block.
    ;; (setq web-mode-comment-style 2)
#+end_src

#+begin_src emacs-lisp
    ;; (flycheck-add-mode 'html-tidy 'web-mode)
#+end_src

Show XML path on the modeline or in an header?

#+begin_src emacs-lisp
    ;; ARCHIBUS Imenu.
    (add-to-list 'web-mode-imenu-regexp-list
                 '("\\(dataSource\\) id=\"\\([a-zA-Z0-9_]*\\)" 1 2 " "))
    (add-to-list 'web-mode-imenu-regexp-list
                 '("\\(panel\\) .*id=\"\\([a-zA-Z0-9_]*\\)" 1 2 " "))
    (add-to-list 'web-mode-imenu-regexp-list
                 '("\\(button\\).*id=\"\\([a-zA-Z0-9_]*\\)" 1 2 " "))
    (add-to-list 'web-mode-imenu-regexp-list
                 '("id=\"\\([a-zA-Z0-9_]*\\).*\\(button\\)" 2 1 " "))
#+end_src

#+begin_src emacs-lisp :tangle no
    (setq web-mode-imenu-generic-expression
          '(
            ("DataSource" "<dataSource[ ]*id=\"\\([a-zA-Z0-9-_./#]*\\)\"[ ]*>" 1)
            ;; ("Includes" "<cfinclude[ ]*template=\"\\([a-zA-Z0-9-_./#]*\\)\"[ ]*>" 1)
            ;; ("Cases" "<cfcase[ ]*value=\"\\([a-zA-Z0-9-_,. ]*\\)\".*>" 1)
            ;; ("Forms" "<form.*action[ ]*=[ ]*\"\\([a-zA-Z0-9-_#.\?=]*\\)\".*>" 1)
            ;; ("Queries" "<cfquery.*name[ ]*=[ ]*\"\\([a-zA-Z0-9-_#.]*\\)\".*>" 1)
            ;; ("Loops" "<\\(cfloop\\|cfoutput\\).*\\(list\\|to\\|query\\)[ ]*=[ ]*\"\\([a-zA-Z0-9-_#.=]*\\)\".*>" 3)
            ;; ("JSFunctions" "function[ ]*\\([a-zA-Z0-9-_]*\\)[ ]*(.*)" 1)
            ;; ("Content" "<cfcontent.*type=\"\\([a-zA-Z0-9-_./]*\\)\".*>" 1)
            ;;                             ;cfmodule, cflocation, cftransaction, cfabort, cfif?, add cfform to forms, cflock
            ))

    (add-hook 'web-mode-hook
              #'(lambda ()
                  (setq imenu-generic-expression
                        web-mode-imenu-generic-expression)))
#+end_src

#+begin_src emacs-lisp
    ;; Highlight `saveWorkflowRuleId' in AXVW files.
#+end_src

#+begin_src emacs-lisp
    )
#+end_src

** XML
:PROPERTIES:
:ID:       786a2051-476a-4277-82df-d8ebf8ba0e99
:END:

nXML mode (default for editing XML files, since GNU Emacs 23.2) does:

- real-time *validation against a schema in RELAX NG* (actually RNC, i.e. the
  "Compact" Syntax): ~C-c C-n~ (assuming RNG validation is on),

- *code completion* against the RNG schema.

Some key bindings:

- ~C-M-n~ ::
     Move forward over one element (~nxml-forward-element~).

- ~C-M-p~ ::
     Move backward over one element (~nxml-backward-element~).

- ~C-M-u~ ::
     Move up the element structure (~nxml-backward-up-element~).

- ~C-M-d~ ::
     Move down the element structure (~nxml-down-element~).

#+begin_src emacs-lisp
  (with-eval-after-load "nxml-mode"

    ;; Indent 4 spaces (for the children of an element relative to the start-tag).
    (setq nxml-child-indent 4)

    (setq nxml-slash-auto-complete-flag t)

    ;; Remove the binding of `C-c C-x' (`nxml-insert-xml-declaration'), used by
    ;; Org timeclocking commands.
    (define-key nxml-mode-map (kbd "C-c C-x") nil)

    ;; View the buffer contents in a browser.
    (define-key nxml-mode-map (kbd "C-c C-v") #'browse-url-of-buffer)
                                        ; XXX Normally bound to
                                        ; `rng-validate-mode'.
#+end_src

#+begin_src emacs-lisp
;; causes entire elements (with children) to be treated as sexps.
(setq nxml-sexp-element-flag t)
#+end_src

#+begin_src emacs-lisp
    ;; Fix XML folding.
    (add-to-list 'hs-special-modes-alist
                 '(nxml-mode
                   "<!--\\|<[^/>]*[^/]>"
                   "-->\\|</[^/>]*[^/]>"
                   "<!--"
                   nxml-forward-element
                   nil))

    (add-hook 'nxml-mode-hook 'hs-minor-mode))
#+end_src

** Highlight the closing tag (Pair highlighting)

#+begin_src emacs-lisp
  ;; Highlight the current SGML tag context (`hl-tags-face').
  (try-require 'hl-tags-mode)
  (with-eval-after-load "hl-tags-mode"

    (add-hook 'html-mode-hook
              #'(lambda ()
                  (require 'sgml-mode)
                  ;; When `html-mode-hook' is called from `html-helper-mode'.
                  (hl-tags-mode 1)))      ; XXX Can't we simplify this form?

    (add-hook 'nxml-mode-hook
              #'(lambda ()
                  (when (< (buffer-size) large-file-warning-threshold) ; View large files.
                    (hl-tags-mode 1))))

    ;; (add-hook 'web-mode-hook #'hl-tags-mode)
    )
#+end_src

** CSS

#+begin_src emacs-lisp
  ;; TODO: Handle media queries
  ;; TODO: Handle wrapped lines
  ;; TODO: Ignore vendor prefixes
  (defun leuven-sort-css-properties ()
    "Sort CSS properties alphabetically."
    (interactive)
    (let ((start (search-forward "{"))
          (end (search-forward "}")))
      (when (and start end)
        (sort-lines nil start end)
        (sort-declarations))))
#+end_src

#+begin_src emacs-lisp
)                                       ; Chapter 25 ends here.
#+end_src

