
* Customization

Emacs 24 custom themes allow loading multiple themes simultaneously.  If you
don't want the previous theme to stay in effect, you will need to unload it
first.

Install Leuven Theme via the [[id:8c71fa50-b62e-49ae-bcbb-2ed1ee7a5d65][Emacs Lisp Packages]] (or use the one bundled in GNU
Emacs 24.4).

#+begin_src emacs-lisp
;;* 49 (info "(emacs)Customization")

(leuven--chapter leuven-load-chapter-49-customization "49 Customization"

  (use-package leuven-theme)
  (ignore-errors
    ;; Load custom theme "Leuven" and enable it.
    (setq org-fontify-whole-heading-line t)
    (setq leuven-scale-outline-headlines nil)
    (setq leuven-scale-org-agenda-structure nil)
    (setq leuven-scale-volatile-highlight nil)
    (load-theme 'leuven t)

    )
#+end_src

** Color

You can govern the sort order of colors now such as HSV or RGB distance from a
particular color...

#+begin_src emacs-lisp
  ;; Color sort order for `list-colors-display'.
  (setq list-colors-sort '(rgb-dist . "#FFFFFF"))
#+end_src

** Variables

#+begin_src emacs-lisp
;;** 49.3 (info "(emacs)Variables")

  (leuven--section "49.3 (emacs)Variables")

  ;; File local variables specifications are obeyed, without query --
  ;; RISKY!
  (setq enable-local-variables t)

  ;; Obey `eval' variables -- RISKY!
  (setq enable-local-eval t)

  ;; Record safe values for some local variables.
  (setq safe-local-variable-values
        '((TeX-master . t) ; Tells AUCTeX that the current file is the master document.
          (ac-sources . (ac-source-words-in-buffer ac-source-dictionary)) ; Specifies auto-complete sources.
          (flycheck-emacs-lisp-initialize-packages . t) ; Initializes packages for flycheck-mode.
          (flycheck-mode . nil) ; Disables flycheck-mode by default.
          (flyspell-mode . -1) ; Disables flyspell-mode by default.
          (flyspell-mode . 1) ; Enables flyspell-mode by default.
          (ispell-local-dictionary . "american") ; Specifies the dictionary to use for ispell.
          (ispell-local-dictionary . "francais") ; Specifies the dictionary to use for ispell.
          (org-tags-column . -80) ; Sets the column for tags in Org mode.
          (outline-minor-mode) ; Enables outline-minor-mode.
          (whitespace-style face tabs spaces trailing lines
                            space-before-tab::space newline indentation::space
                            empty space-after-tab::space space-mark tab-mark
                            newline-mark))) ; Sets whitespace style options.
#+end_src

Have a look at (info "(emacs)Directory Variables").

** Key Bindings

The keys ~C-c LETTER~ are [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html
][reserved for user functions]].

You can get a list of all the disabled functions by typing:

#+begin_src emacs-lisp :tangle no
M-: (let (lst) (mapatoms (lambda (x) (if (get x 'disabled) (push x lst)))) lst) RET
#+end_src

#+begin_src emacs-lisp
;;** 49.4 Customizing (info "(emacs)Key Bindings")

  (leuven--section "49.4 Customizing (emacs)Key Bindings")
#+end_src

See as well Print keybindings (pkb).

#+begin_src emacs-lisp
  ;; Print the key bindings in a tabular form.
  (defun leuven-keytable (arg)
    "Print the key bindings in a tabular form."
    (interactive "sEnter a modifier string:")
    (with-output-to-temp-buffer "*Key table*"
      (let* ((i 0)
             (keys (list "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l"
                         "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x"
                         "y" "z" "<RET>" "<down>" "<up>" "<right>"
                         "<left>" "<home>" "<end>" "<f1>" "<f2>" "<f3>"
                         "<f4>" "<f5>" "<f6>" "<f7>" "<f8>" "<f9>"
                         "<f10>" "<f11>" "<f12>" "1" "2" "3" "4" "5" "6"
                         "7" "8" "9" "0" "`" "~" "!" "@" "#" "$" "%" "^"
                         "&" "*" "(" ")" "-" "_" "=" "+" "\\" "|" "{" "["
                         "]" "}" ";" "'" ":" "\"" "<" ">" "," "." "/" "?"
                         ))
             (n (length keys))
             (modifiers (list "" "S-" "C-" "M-" "M-C-"))
             (k))
        (or (string= arg "") (setq modifiers (list arg)))
        (setq k (length modifiers))
        (princ (format " %-10.10s |" "Key"))
        (let ((j 0))
          (while (< j k)
            (princ (format " %-28.28s |" (nth j modifiers)))
            (setq j (1+ j))))
        (princ "\n")
        (princ (format "_%-10.10s_|" "__________"))
        (let ((j 0))
          (while (< j k)
            (princ (format "_%-28.28s_|"
                           "_______________________________"))
            (setq j (1+ j))))
        (princ "\n")
        (while (< i n)
          (princ (format " %-10.10s |" (nth i keys)))
          (let ((j 0))
            (while (< j k)
              (let* ((binding
                      (key-binding (read-kbd-macro
                                    (concat (nth j modifiers)
                                            (nth i keys)))))
                     (binding-string "_"))
                (when binding
                  (if (eq binding 'self-insert-command)
                      (setq binding-string (concat "'" (nth i keys) "'"))
                    (setq binding-string (format "%s" binding))))
                (setq binding-string
                      (substring binding-string 0
                                 (min (length binding-string) 28)))
                (princ (format " %-28.28s |" binding-string))
                (setq j (1+ j)))))
          (princ "\n")
          (setq i (1+ i)))
        (princ (format "_%-10.10s_|" "__________"))
        (let ((j 0))
          (while (< j k)
            (princ (format "_%-28.28s_|"
                           "_______________________________"))
            (setq j (1+ j))))))
    (delete-window)
    (setq truncate-lines t))
#+end_src

#+begin_src emacs-lisp
  ;; Guide the following key bindings automatically and dynamically.
  (with-eval-after-load "which-key-autoloads"
    (idle-require 'which-key))

  (with-eval-after-load "which-key"

    (which-key-mode)

    ;; Apply suggested settings for side-window that opens on right if there is
    ;; space and the bottom otherwise.
    (which-key-setup-side-window-right-bottom)

    (setq which-key-idle-delay 0.4)

    (setq which-key-sort-order 'which-key-local-then-key-order)

    ;; Set the maximum length (in characters) for key descriptions (commands or
    ;; prefixes).
    (setq which-key-max-description-length 33))
#+end_src

** Syntax Table

The syntax table contains information that tells Emacs how to operate on text,
words, sentences etc.  It will make Emacs know enough about all the symbols in
a buffer.  Syntax table is used for example for:

- commands like ~forward-word~ (~M-f~) or ~backward-kill-word~ (~M-DEL~),
- spell-checking of words,
- expansion commands of abbrevs.

Evaluate ~current-word~ and see whether characters such as ~-~ and ~_~ are considered
part of the word (depending on the current major mode).

#+begin_src emacs-lisp
)                                       ; Chapter 49 ends here.
#+end_src

