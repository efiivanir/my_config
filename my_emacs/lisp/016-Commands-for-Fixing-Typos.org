* Commands for Fixing Typos

#+begin_src emacs-lisp
;;* 16 Commands for (info "(emacs)Fixit") Typos

(leuven--chapter leuven-load-chapter-16-fixit "16 Commands for Fixing Typos"
#+end_src

** Checking and Correcting Spelling

#+begin_note
On Windows:
- Install [[http://ftp.gnu.org/gnu/aspell/w32/Aspell-0-50-3-3-Setup.exe][GNU Aspell 0.50.3]] (more dictionaries than Cygwin Aspell)
- Install [[http://ftp.gnu.org/gnu/aspell/w32/Aspell-en-0.50-2-3.exe][Aspell English dictionary-0.50-2]]
- Add ~C:\Program Files (x86)\Aspell\bin~ to the System ~PATH~
#+end_note

GNU *Aspell* is better than *Ispell*:

- It does recognize words with apostrophes (l'avion)... but it is slower.

- It can handle UTF-8 documents far better than Ispell can.

When spellchecking a buffer, the ~A~ command accepts an incorrect word, and adds
it to the *file word list* (~ispell-add-per-file-word-list~).

#+begin_src emacs-lisp
;;** 16.4 Checking and Correcting (info "(emacs)Spelling")

  (leuven--section "16.4 (emacs)Checking and Correcting Spelling")

  ;; Spelling checker program.
  (setq ispell-program-name             ; Defined in ispell.el.
        (or (executable-find "aspell")
            (executable-find "hunspell")
            (executable-find "ispell")
            ;; nil                      ; [Default: "ispell"]
            ))

  (defun leuven--executable-ispell-program-name-p ()
    "Ensure that `ispell-program-name' is an executable program name."
    (and (boundp 'ispell-program-name)
         ispell-program-name            ; It can be nil!
         (file-executable-p ispell-program-name)
         ispell-program-name))

  (when (leuven--executable-ispell-program-name-p)

    (defun leuven-ispell-region-or-buffer ()
      "Interactively check the current region or buffer for spelling errors."
      (interactive)
      (if mark-active
          (if (< (mark) (point))
              (ispell-region (mark) (point))
              (ispell-region (point) (mark)))
          (ispell-buffer)))

    ;; Key bindings (or `C-c i' prefix key binding?).
    (global-set-key (kbd "C-$") #'leuven-ispell-region-or-buffer)
    (global-set-key (kbd "C-M-$") #'ispell-change-dictionary)

    ;; ;; Default dictionary to use (if `ispell-local-dictionary' is nil, that
    ;; ;; is if there is no local dictionary to use in the buffer).
    ;; (setq ispell-dictionary "american") ; see `sentence-end-double-space'
#+end_src

#+begin_src emacs-lisp
    ;; Comments in programs should always be in English.
    (add-hook 'prog-mode-hook
              #'(lambda ()
                  (setq ispell-dictionary "american")))
#+end_src

*************** TODO Enable Flyspell in other modes deriving from Text (HTML, etc.)

#+begin_src emacs-lisp :tangle no
    ;; Enable on-the-fly spell checking.
    (add-hook 'text-mode-hook
              #'(lambda ()
                  (message "[Turning on Flyspell mode in `%s']" (buffer-name))
                  (flyspell-mode)))
#+end_src

#+begin_src emacs-lisp
    ;; Prevent Flyspell from finding mistakes in the code, well in comments and
    ;; strings.
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package ispell
	:ensure nil
	:config
	;; Save the personal dictionary without confirmation.
	(setq ispell-silently-savep t)
	;; Extensions and extra switches to pass to the `ispell' program.
	(cond
#+end_src

Tell ~aspell~ to speed up, though this reduces somewhat the quality of its
suggestions.  According to the ~aspell~ documentation:

- ~ultra~ is the fastest suggestion mode, which is still twice as slow as ~ispell~.

- If your machine is fast enough, a better option might be to try ~fast~ mode,
  which is twice as slow as ~ultra~, but more accurate.

- The ~normal~ mode, which is the ~aspell~ default, is even more accurate, but is
  reportedly 10 times slower than ~fast~ mode.

Use the ~-C~ option which will ConsiderCamelCaseToBeCorrect.

#+begin_src emacs-lisp
       ((string-match "aspell" ispell-program-name)
        (setq ispell-extra-args '("--sug-mode=ultra" "-C"))
        (setq ispell-really-aspell t)
        (setq ispell-really-hunspell nil))
#+end_src

#+begin_src emacs-lisp
       ((string-match "ispell" ispell-program-name)
        (setq ispell-extra-args '())
        (setq ispell-really-aspell nil)
        (setq ispell-really-hunspell nil)))
#+end_src

#+begin_src emacs-lisp :tangle no
      ;; ;; Solve the problem of words separated by `-' flagged as
      ;; ;; erroneous by removing the `-' from the value of otherchars.
      ;; (if (fboundp 'ispell-get-decoded-string)
      ;;     (defun ispell-get-otherchars ()
      ;;       (replace-regexp-in-string "-" "" (ispell-get-decoded-string 3))))
#+end_src

Add language indicator.

#+begin_src emacs-lisp
      ;; (setq-default mode-line-format
      ;;               (cons
      ;;                '(:eval
      ;;                  (let ((dict (and (featurep 'ispell)
      ;;                                   (not buffer-read-only)
      ;;                                   (or ispell-local-dictionary
      ;;                                       ispell-dictionary
      ;;                                       "--" ; default dictionary
      ;;                                       ))))
      ;;                    (and dict
      ;;                         (propertize (concat " " (substring dict 0 2))
      ;;                                     'face 'mode-line-highlight))))
      ;;                (default-value 'mode-line-format)))
#+end_src

#+begin_src emacs-lisp
      )
#+end_src

#+begin_note
Each time you cycle to another window (~C-x o~), the *Ispell process* gets *killed*
and a *new Ispell process* is *started*, if the language in the next window is
different from the language in the current window...
#+end_note

~flyspell-auto-correct-word~ is bound to ~C-.~.  Press it one time to correct the
word under the cursor.  If several spellings are possible, they appear in the
minibuffer.  Just keep hitting ~C-.~ to replace the word with the successive
suggestions.

#+begin_src emacs-lisp
	(use-package flyspell
	  :config
	  ;; Remove the binding of `flyspell-auto-correct-previous-word', to be used
	  ;; by Multiple Cursors.
	  (define-key flyspell-mode-map (kbd "C-;") nil)
	)
#+end_src

~flyspell-goto-next-error~ is bound to "C-,".  Press it to go to the next
previously detected error.

~flyspell-correct-word-before-point~ is bound to ~C-c $~.  Press it to *pop up a menu*
of possible corrections for misspelled word before point.

#+begin_src emacs-lisp
  ;; Don't use `M-TAB' to auto-correct the current word (only use `C-.').
  (setq flyspell-use-meta-tab nil)
  ;; FIXME M-TAB is still bound to `flyspell-auto-correct-word' when this
  ;; chunk of code is placed within (with-eval-after-load "flyspell"...)

  (use-package flyspell
	:config
   ;; Don't consider that a word repeated twice is an error.
   (setq flyspell-mark-duplications-flag nil)

   ;; Lower (for performance reasons) the maximum distance for finding
   ;; duplicates of unrecognized words.
   (setq flyspell-duplicate-distance 12000) ; [default: 400000]

   ;; Fix the "enabling flyspell mode gave an error" bug.
   (setq flyspell-issue-welcome-flag nil)

   ;; ;; Don't print messages for every word (when checking the entire buffer)
   ;; ;; as it causes a (small) slowdown.
   ;; (setq flyspell-issue-message-flag nil)

   ;; Dash character (`-') is considered as a word delimiter.
   (setq-default flyspell-consider-dash-as-word-delimiter-flag t)
   ;; '("francais" "deutsch8" "norsk")

   (defun leuven-flyspell-toggle-dictionary ()
	 "Toggle the local dictionary between French and US English."
	 (interactive)
	 (let ((dict (or ispell-local-dictionary
					 ispell-dictionary)))
	   (setq dict (if (string= dict "francais") "american" "francais"))
	   (message "[Switched to %S]" dict)
	   (sit-for 0.5)
	   (ispell-change-dictionary dict)
	   (force-mode-line-update)
	   (when flyspell-mode
		 ;; (flyspell-delete-all-overlays)
		 ;; If above is executed, the advised `org-mode-flyspell-verify'
		 ;; won't work anymore.
		 (flyspell-buffer))))

   ;; Key bindings.
   (global-set-key (kbd "C-$") #'flyspell-buffer)
   (global-set-key (kbd "C-M-$") #'leuven-flyspell-toggle-dictionary)

   ;; Spell-check your XHTML (by adding `nxml-text-face' to the list of
   ;; faces corresponding to text in programming-mode buffers).
   (add-to-list 'flyspell-prog-text-faces 'nxml-text-face)))
#+end_src

#+begin_src emacs-lisp
)                                       ; Chapter 16 ends here.
#+end_src

