#+TITLE: Efi Ivanir's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showall
* Quotations
** On Emacs
#+begin_quote
Emacs outshines all other editing software in approximately the same way that the noonday sun does the stars. It is not just bigger and brighter; it simply makes everything else vanish.

-- Neal Stephenson, "[[http://www.cryptonomicon.com/beginning.html][In the Beginning was the Command Line]]"
#+end_quote

#+begin_quote
On 2 Apr 1992 in the journal Nature the discovery was reported that a giant ancient fungus had been living under the forests of Michigan for at least 1,500 years, the oldest and largest living thing on Earth. Software could get to be like that, I suppose, and Emacs, incorporating, like the fungal thallus, all the the filamentous strands of Emacs Lisp that now already thinly web the Earth, is surely a front runner. But do not be distracted by such lives.  Even the life of Emacs, like the life of that fungus, is an ephemerality; to grok life one must transcend not only thermospace but cyberspace.

-- [[http://www.eskimo.com/~seldon/dotemacs.el][Will Mengarini]]
#+end_quote
** On Literate Programming
#+begin_quote
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.

The practitioner of literate programming can be regarded as an essayist, whose main concern is with exposition and excellence of style. Such an author, with thesaurus in hand, chooses the names of variables carefully and explains what each variable means. He or she strives for a program that is comprehensible because its concepts have been introduced in an order that is best for human understanding, using a mixture of formal and informal methods that reinforce each other.

-- Donald Knuth
#+end_quote

#+begin_quote
In my experience, software created with literate programming has turned out to be significantly better than software developed in more traditional ways...

Jon Bentley probably hit the nail on the head when he once was asked why literate programming hasn’t taken the whole world by storm. He observed that a small percentage of the world’s population is good at programming, and a small percentage is good at writing; apparently I am asking everybody to be in both subsets.

Yet to me, literate programming is certainly the most important thing that came out of the TeX project. Not only has it enabled me to write and maintain programs faster and more reliably than ever before, and been one of my greatest sources of joy since the 1980s—it has actually been indispensable at times.

-- [[http://www.informit.com/articles/article.aspx?p=1193856][Donald Knuth]]
#+end_quote
* Settings
** Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Efi Ivanir"
	user-mail-address "efi.ivanir@gmail.com")
#+END_SRC
** Enable Package Support
I set up packages, Melpa, and use-package bright and early so that I can make use of use-package's bind-key macro.

If I recall correctly, when I first copy this set-up into a new machine, I still have to require package, add MELPA, initialize package, and grab use-package, solarized-theme. This could be improved, but it's not so bad.
*** Use-Package
Use-package is a handful of things: you can make sure a package is downloaded, efficiently configure it (e.g. after load, or as needed), bind keys in a concise way, and more.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
	'(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")  
  ))
  (setq load-prefer-newer t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Detection
*** Detect Operating System
These functions identify what operating system is hosting Emacs, which can be handy for system specific configuration. I have run Emacs on Windows, OS X, Linux, and BSD. I currently use Linux most of the time, and OS X some of the time, so my configuration is geared towards those. Still, I may want to run my configuration on Windows or BSD in the future so I include those functions.

#+BEGIN_SRC emacs-lisp
  (defun is-mac-p
      ()
    (eq system-type 'darwin))

  (defun is-linux-p
      ()
    (eq system-type 'gnu/linux))

  (defun is-windows-p
      ()
    (or
     (eq system-type 'ms-dos)
     (eq system-type 'windows-nt)
     (eq system-type 'cygwin)))

  (defun is-bsd-p
      ()
    (eq system-type 'gnu/kfreebsd))
#+END_SRC
*** Detect Internet Connection
#+BEGIN_SRC emacs-lisp
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
		       (if host host "www.google.com"))))
#+END_SRC
** Graphical Features
*** Theme
Looking for an awesome Emacs color theme? Looking for one of the best light themes for Org mode, and for other modes too? 
Here’s the place to find one!
Welcome to the custom Leuven theme, an elegant and popular color theme for light backgrounds, with built-in style for many 
components such as Org mode, Gnus, Dired+ and EDiff. Make it yours!
#+BEGIN_SRC emacs-lisp
   (add-to-list 'custom-theme-load-path "/home/ivanir/my_emacs/emacs-leuven-theme/lisp")
   (load-theme 'leuven t)
    ;; Fontify the whole line for headings (with a background color).
 ; (setq org-fontify-whole-heading-line t)
    ;;You don’t like my large Org level-1 headings or my large Org agenda-date heading (though I made them larger on purpose!)?
    ;;Then, set the variable leuven-scale-outline-headlines to nil before the theme is loaded.
 ; (setq leuven-scale-outline-headlines nil)

  ;;Other settings you might want to consider:
 ; (setq leuven-scale-org-agenda-structure nil)
 ; (setq leuven-scale-volatile-highlight nil)
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Source Code Pro" nil t)
  ;;(set-face-attribute 'default nil :height 150)
#+END_SRC
*** Prettify Symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode +1)
#+END_SRC
*** Cursor
Adaptive cursor width shows width of character, e.g. TAB. Via [[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Pragmatic Emacs]].

#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC
*** Turn on unnecessary graphical features
**** Tool Bar
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode 1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode 1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode 1))
#+END_SRC
**** Startup Messages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
	initial-scratch-message ""
	inhibit-startup-echo-area-message t)
#+END_SRC
** Security
*** TLS
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t
        gnutls-verify-error t)
#+END_SRC
*** Encryption
[[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][This will force Emacs to use its own internal password prompt instead of an external pin entry program.]]

#+BEGIN_SRC emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC
** Backups
I find Emacs default behavior of saving files relative to the current directory annoying, as it puts backup files everywhere. Instead, this saves backups in one directory, a backup folder within my Emacs directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+END_SRC
** Prompts
*** Yes or No
Make yes or no prompts be y or n prompts.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Buffer / File Warnings
Remove the warning if a buffer or file does not exist, so you can create them. ([[https://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/][Source]].)

#+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil)

  (defun create-non-existent-directory ()
    "Check whether a given file's parent directories exist; if they do not, offer to create them."
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))

  (add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC
** NoTabs
#+begin_quote
If you want to use spaces instead of tabs when indenting, put the following in your .emacs file:
#+end_quote
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
You may also customize the ‘indent-tabs-mode’ variable instead, obviously. If you want to remove tabs in an existing file, mark the whole buffer using C-x h and use M-x untabify. (M-x tabify does the opposite …)

Discussion on whether this is a good idea: TabsAreEvil (or not).

If you wish to change the amount of spaces that the Tab key inserts, check out the TabStopList page. Do not confuse this with tab-width, which is only good for displaying existing tabs in files!

The tab-width variable tells Emacs how wide a tab is (more precisely, the distance between tab stops). You might want to set it to something other than 8 before calling M-x untabify.

    So How Do I Insert a Tab If I Really Have To?
    Smart inference of indentation style

So How Do I Insert a Tab If I Really Have To?

Yes, of course you agree that TabsAreEvil. But you just have to indulge yourself a tab from time to time – perhaps to create a file in some required format. Whaddya do?

‘C-q’ to the rescue! Don’t forget it: ‘C-q’ says “insert the next character, whatever it is” (command quoted-insert).

So, ‘C-q <tab>’ does the trick. – DrewAdams
Smart inference of indentation style

I prefer NoTabs, but sometimes I work on a project that does use tab indentation. I don’t want to cause problems for these source files. As a result, I use the following snippet to default to no tabs, but to use tabs if that’s what a pre-existing file is primarily using for indentation:
#+begin_src emacs-lisp
(defun infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if        
  ;; neither, we use the current indent-tabs-mode                               
  (let ((space-count (how-many "^  " (point-min) (point-max)))
        (tab-count (how-many "^\t" (point-min) (point-max))))
    (if (> space-count tab-count) (setq indent-tabs-mode nil))
    (if (> tab-count space-count) (setq indent-tabs-mode t))))
#+end_src
[in my c-mode hook, or whatever other mode I want to have smart indentation]
#+begin_src emacs-lisp
  (setq indent-tabs-mode nil)
  (infer-indentation-style)
  (setq tab-width 4)
#+end_src
** Other
*** Macros
[[https://www.youtube.com/watch?v=67dE1lfDs9k][Think about]] macros! [[http://emacsnyc.org/assets/documents/keyboard-macro-workshop-exercises.zip][Play with]] macros!

#+BEGIN_SRC emacs-lisp
  (setq kmacro-ring-max 30)
#+END_SRC
*** Ediff
The default Ediff behavior is confusing and not desirable. This fixes it.

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+END_SRC
*** Enable functionality
Some features and settings are disabled by default; this is sane behavior for new users, but it is expected that we will disable them eventually.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+END_SRC
*** Casing
The following advice makes the upcase/downcase/capitalize-word functions more usable. Thanks, [[http://oremacs.com/2014/12/23/upcase-word-you-silly/][Oleh]]!

#+BEGIN_SRC emacs-lisp
  (defadvice upcase-word (before upcase-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))

  (defadvice downcase-word (before downcase-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))

  (defadvice capitalize-word (before capitalize-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))
#+END_SRC

Also, unbind downcase region, which has plagued my documents for eons.

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-x C-l")
#+END_SRC
*** Working with the Mark
From Artur's article, "[[http://endlessparentheses.com/faster-pop-to-mark-command.html][Faster Pop to Mark Command]]."

#+BEGIN_SRC emacs-lisp
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  (setq set-mark-command-repeat-pop t)
#+END_SRC
*** Encoding
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC
*** Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
* Key Bindings
Although keybindings are also located elsewhere, this section will aim to provide bindings that are not specific to any mode, package, or function.

** Text Expansion
#+BEGIN_SRC emacs-lisp
  (bind-key "M-/" #'hippie-expand)
#+END_SRC
** Lines
Enable line indenting automatically. If needed, you can disable on a mode-by-mode basis.

#+BEGIN_SRC emacs-lisp
  (bind-keys ("RET" . newline-and-indent)
             ("C-j" . newline-and-indent))
#+END_SRC

Make C-n insert new lines if the point is at the end of the buffer.

#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines t)
#+END_SRC
** Movement
These allow you to move lines and characters with an automatic prefix argument of 5, which accelerates movements. Via [[http://whattheemacsd.com/key-bindings.el-02.html][What the .emacs.d?]].

#+BEGIN_SRC emacs-lisp
  (defun super-next-line ()
    (interactive)
    (ignore-errors (next-line 5)))

  (defun super-previous-line ()
    (interactive)
    (ignore-errors (previous-line 5)))

  (defun super-backward-char ()
    (interactive)
    (ignore-errors (backward-char 5)))

  (defun super-forward-char ()
    (interactive)
    (ignore-errors (forward-char 5)))

  (bind-keys ("C-S-n" . super-next-line)
            ("C-S-p" . super-previous-line)
             ("C-S-b" . super-backward-char)
             ("C-S-f" . super-forward-char))
#+END_SRC
** Meta Binds
I [[http://endlessparentheses.com/Meta-Binds-Part-1%25253A-Drunk-in-the-Dark.html][make use of]] meta-binds to get additional, easy bindings. Prefix arguments can be invoked with control key or C-u.

#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-1" . delete-other-windows)
             ("M-O" . mode-line-other-buffer))
#+END_SRC
** Copying and Killing
This advises kill-region (C-w) so that, if no region is selected, it kills or copies the current line.

#+BEGIN_SRC emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC
** backward-kill-line
This binding comes from [[http://emacsredux.com/blog/2013/04/08/kill-line-backward/][Emacs Redux]]. Note that we don't need a new function, just an anonymous function.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-<backspace>" (lambda ()
                              (interactive)
                              (kill-line 0)
                              (indent-according-to-mode)))
#+END_SRC
** Sentence and Paragraph Commands
By default, sentence-end-double-space is set to t. That convention may be programatically convenient, but that's not how I write. I want to be able to write normal sentences, but still be able to fill normally. Let to the rescue!

#+BEGIN_SRC emacs-lisp
  (defadvice forward-sentence (around real-forward)
    "Consider a sentence to have one space at the end."
    (let ((sentence-end-double-space nil))
      ad-do-it))

  (defadvice backward-sentence (around real-backward)
    "Consider a sentence to have one space at the end."
    (let ((sentence-end-double-space nil))
      ad-do-it))

  (defadvice kill-sentence (around real-kill)
    "Consider a sentence to have one space at the end."
    (let ((sentence-end-double-space nil))
      ad-do-it))

  (ad-activate 'forward-sentence)
  (ad-activate 'backward-sentence)
  (ad-activate 'kill-sentence)
#+END_SRC

A slightly less tricky matter is the default binding of backward- and forward-paragraph, which are at the inconvenient M-{ and M-}. This makes a bit more sense, no?

#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-A" . backward-paragraph)
             ("M-E" . forward-paragraph)
             ("M-K" . kill-paragraph))
#+END_SRC
** Directories and Files (Dired)
For me, Dired is one of Emacs' (less-heralded) killer apps, along with Org-Mode and Magit.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure f
    :bind 
    (("<f2>" . dired)
     ("C-x C-d" . dired)
     :map dired-mode-map
     ("C-x o" . ace-window)
     ("<return>" . dired-find-alternate-file)
     ("'" . wdired-change-to-wdired-mode)
     ("s-/" . dired-filter-mode))
    :config
    (bind-key "^" (lambda () (interactive) (find-alternate-file "..")) dired-mode-map)
    (put 'dired-find-alternate-file 'disabled nil)
    ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
    (setq dired-dwim-target t
          dired-recursive-deletes 'always
          dired-recursive-copies 'always
          dired-isearch-filenames t
          dired-listing-switches "-alht"
          ;; dired-omit-files-p t
          ;; dired-omit-files "\\|^.DS_STORE$\\|^.projectile$"
          )

   )
  
#+END_SRC

Some of these suggestions are adapted from Xah Lee's [[http://ergoemacs.org/emacs/emacs_dired_tips.html][article on Dired]]. dired-find-alternate-file, which is bound to a,
is disabled by default. <return> was previously dired-advertised-find-file, and ^ was previously dired-up-directory.
Relatedly, I re-bind 'q' to my kill-this-buffer function below.

Dired-details lets me show or hide the details with ) and (, respectively. If, for some reason,
it becomes hard to remember this, dired-details+ makes the parentheses interchangeable.

** Searching (rg)
#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :bind (("C-c d" . deadgrep)
           ("C-c D" . counsel-rg)
           (:map deadgrep-mode-map
                 ("q" . kill-this-buffer))))
#+END_SRC
* Programing
** Python
*** lsp-package
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))

#+end_src
*** pyvenv
#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/ipython3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "ipython3")))))


#+end_src
* Words and Numbers
"GNU Office Suite Pro Edition," coming to a cubicle near you!
** Writing (Org Mode)
*** Quotations
#+begin_quote
Org-mode does outlining, note-taking, hyperlinks, spreadsheets, TODO lists, project planning, GTD, HTML and LaTeX authoring, 
all with plain text files in Emacs.

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote

#+begin_quote
If I hated everything about Emacs, I would still use it for org-mode.

-- [[http://orgmode.org/worg/org-quotes.html][Avdi]] on Twitter
#+end_quote

#+begin_quote
...for all intents and purposes, Org-mode *is* [[http://www.taskpaper.com/][Taskpaper]]!

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote
*** Configuration
I use the stock package of org-mode as the default major mode.

My settings for capture were some of my first Elisp :) I did need, and still need, the help of the 
[[http://orgmode.org/manual/Capture-templates.html#Capture-templates][Org-Mode manual]], of course.

The theming for Org-Mode is derived from [[https://lepisma.github.io/2017/10/28/ricing-org-mode/][Ricing up Org Mode]] 
with help from folks on [[https://www.reddit.com/r/emacs/comments/9m22lw/ricing_org_mode_with_spacemacs/][Reddit]]. 
Be sure to download the fonts [[https://github.com/edwardtufte/et-book/tree/gh-pages/et-book][here]].


#+BEGIN_SRC emacs-lisp
  (use-package org
      :bind (("C-c l" . org-store-link)
	     ("C-c c" . org-capture)
	     ("C-c a" . org-agenda)
	     ("C-c b" . org-iswitchb)
	     ("C-c s" . org-show-all)
	     ("C-c M-k" . org-cut-subtree)
	     :map org-mode-map
	     ("C-c >" . org-time-stamp-inactive))
    :init
    (setq default-major-mode 'org-mode
	  org-directory "~/org/"
	  org-todo-keywords
	  (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
	      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))
	 ; org-todo-keywords
	 ; '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "SOMEDAY(.)" "MAYBE(m)" "|" "DONE(x!)" "CANCELLED(c)"))

    )
    (setq org-agenda-files (quote ("~/org"
			       "~/org/hyperpv"
			       "~/org/home")))

  )
#+END_SRC
*** Org Mode - Organize Your Life In Plain Text!
**** 4.6 Key bindings
#+BEGIN_SRC emacs-lisp
   ;; Custom Key Bindings
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "<f5>") 'bh/org-todo)
  (global-set-key (kbd "<S-f5>") 'bh/widen)
  (global-set-key (kbd "<f4>") 'kill-buffer)
  (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
  (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
  (global-set-key (kbd "<f9> b") 'bbdb)
  (global-set-key (kbd "<f9> c") 'calendar)
  (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
  (global-set-key (kbd "<f9> g") 'gnus)
  (global-set-key (kbd "<f9> h") 'bh/hide-other)
  (global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

  (global-set-key (kbd "<f9> I") 'bh/punch-in)
  (global-set-key (kbd "<f9> O") 'bh/punch-out)

  (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

  (global-set-key (kbd "<f9> r") 'boxquote-region)
  (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

  (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
  (global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

  (global-set-key (kbd "<f9> v") 'visible-mode)
  (global-set-key (kbd "<f9> l") 'org-toggle-link-display)
  (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
  (global-set-key (kbd "C-x n r") 'narrow-to-region)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  (global-set-key (kbd "C-<f11>") 'org-clock-in)
  (global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
  (global-set-key (kbd "C-c c") 'org-capture)

  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading 'invisible-ok)
      (hide-other)
      (org-cycle)
      (org-cycle)
      (org-cycle)))

  (defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; now refresh window display (an idiom from simple.el):
    (save-excursion
      (set-window-start (selected-window)
			(window-start (selected-window)))))

  (defun bh/make-org-scratch ()
    (interactive)
    (find-file "/tmp/publish/scratch.org")
    (gnus-make-directory "/tmp/publish"))

  (defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
#+END_SRC
**** 5 Tasks and States
#+begin_quote
I use one set of TODO keywords for all of my org files. Org-mode lets you define TODO keywords per file but I find it's easier to have a standard set of TODO keywords globally so I can use the same setup in any org file I'm working with.

The only exception to this is this document :) since I don't want org-mode hiding the TODO keyword when it appears in headlines. I've set up a dummy #+SEQ_TODO: FIXME FIXED entry at the top of this file just to leave my TODO keyword untouched in this document.
#+end_quote
***** 5.1 TODO keywords
#+begin_quote
I use a light colour theme in emacs. I find this easier to read on bright sunny days.

Here are my TODO state keywords and colour settings:
#+end_quote
#+BEGIN_SRC emacs-lisp
;(setq org-todo-keywords
;      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
;              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC emacs-lisp

*** org-view-mode 
#+begin_quote
This is my attempt to reduce clutter when viewing org-mode files. I think it looks noisy to look at all the markup, 
especially in README files when they are displayed in Dired buffers with my dired-auto-readme mode. 
When viewing org-files, I am usually mostly interested in the content, not so in markup. 
Org-view-mode is an attempt to create a read-only “viewer” mode. Thus per definition, this minor mode is for 
consuming org content, not so much for creating it. It could be actually renamed org-readme-mode, since I have created 
it mostly to read README files in git repos without unnecessary noise :-). 
Also, don’t expect this to work well with org-capture, agendas, etc.
-- [[https://github.com/amno1/org-view-mode]]
#+end_quote
#+BEGIN_SRC emacs-lisp
(use-package org-view-mode
  :ensure t)
#+END_SRC

